{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"About Webhook.site With Webhook.site , you instantly get a unique, random URL that you can use to test and debug Webhooks and HTTP requests, as well as to create your own workflows using the Custom Actions graphical editor or WebhookScript , a simple scripting language, to transform, validate and process HTTP requests. What are people using it for? Receive Webhooks without needing an internet-facing Web server Send Webhooks to a server that's behind a firewall or private subnet Transforming Webhooks into other formats, and re-sending them to different systems Connect different APIs that aren't compatible Building contact forms that send emails Instantly build APIs without needing infrastructure Built by Simon Fredsted ( @fredsted ). Open Source There are two versions of Webhook.site: The completely open-source, MIT-licensed version is available on Github , which can be self-hosted using e.g. Docker, is great for testing Webhooks, but doesn't include features like Custom Actions. The cloud version at https://webhook.site which has more features, some of them requiring a paid subscription. Acknowledgements The app was built with Laravel for the API and Angular.js for the frontend SPA. WebhookScript based on Primi Copyright (c) P\u0159emysl Karbula. The WebhookScript editor is using the Ace . JSONPath extraction provided by FlowCommunications . This documentation site uses MkDocs with the Material theme.","title":"About"},{"location":"index.html#about-webhooksite","text":"With Webhook.site , you instantly get a unique, random URL that you can use to test and debug Webhooks and HTTP requests, as well as to create your own workflows using the Custom Actions graphical editor or WebhookScript , a simple scripting language, to transform, validate and process HTTP requests. What are people using it for? Receive Webhooks without needing an internet-facing Web server Send Webhooks to a server that's behind a firewall or private subnet Transforming Webhooks into other formats, and re-sending them to different systems Connect different APIs that aren't compatible Building contact forms that send emails Instantly build APIs without needing infrastructure Built by Simon Fredsted ( @fredsted ).","title":"About Webhook.site"},{"location":"index.html#open-source","text":"There are two versions of Webhook.site: The completely open-source, MIT-licensed version is available on Github , which can be self-hosted using e.g. Docker, is great for testing Webhooks, but doesn't include features like Custom Actions. The cloud version at https://webhook.site which has more features, some of them requiring a paid subscription.","title":"Open Source"},{"location":"index.html#acknowledgements","text":"The app was built with Laravel for the API and Angular.js for the frontend SPA. WebhookScript based on Primi Copyright (c) P\u0159emysl Karbula. The WebhookScript editor is using the Ace . JSONPath extraction provided by FlowCommunications . This documentation site uses MkDocs with the Material theme.","title":"Acknowledgements"},{"location":"api.html","text":"Webhook.site API The Webhook.site API is public, free to use, doesn't require authentication and is relatively easy to use. Note Please note that fair use guidelines and other limitations apply as described by the Terms of Service . At its core, Webhook.site takes your data (HTTP requests) and returns it back to you, and also letting you execute various actions based on the contents with Custom Actions . Base URL: https://webhook.site . We recommend that you set the Accept header to application/json . About Tokens A token is a container for incoming requests and emails, and corresponds to a Webhook.site URL or Email. A token ID is a 36 character UUID consisting of hexadecimal characters and dashes. Simply, the token ID is the part after https://webhook.site/ in the URL, or before @email.webhook.site in the email address. Authentication While most functions in the API work without any authentication whatsoever, some endpoints do require authentication, or will return a 401 Unauthorized status code. API Key An API Key can be generated in the Control Panel, and provides access to Tokens that are either a) password protected or b) require login. To specify an API Key in a request, use a HTTP header: Api-Key: [your API Key] Password If you have enabled password authentication on a Webhook.site URL/Token, to access the resource, either a) use the ?password=[your password] query string b) set the password using HTTP Basic Auth. Tokens Create token POST /token After creating your token, the URL at https://webhook.site/{token.uuid} becomes accessible, and emails can be sent to {token.uuid}@email.webhook.site . default_* parameters sets the response of the URL. timeout waits an amount of seconds before returning the response (intended for testing timeouts) expiry set to true will cause the token to automatically be deleted within 7 days of no activity, even if creating the token as a Premium user. If you're using tokens for automated testing, for example, you can enable this to avoid filling up your user profile. cors set to true will add CORS headers to the request so browsers will send cross-domain requests to the URL Request { \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , \"timeout\" : 0 , \"cors\" : false , \"expiry\" : true } Response 200 OK { \"redirect\" : false , \"alias\" : null , \"timeout\" : 0 , \"premium\" : true , \"uuid\" : \"9981f9f4-657a-4ebf-be7c-1915bedd4775\" , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"default_content\" : \"Hello world!\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : \"2019-10-22 10:52:20\" , \"created_at\" : \"2019-09-22 10:52:20\" , \"updated_at\" : \"2019-09-22 10:52:20\" } Note about expiry: If there's no incoming requests for about a week, and the token is not upgraded to premium, the token is automatically deleted along with any other data. Update token Can require authentication. PUT /token/:token_id Request See POST /token Response See POST /token Set password (Premium) Can require authentication. Requires user with Premium upgrade. PUT /token/:token_id/password Sets a password to view the requests of a token. Request { \"password\" : \"hunter2\" , \"old_password\" : \"hunter1\" } Response See POST /token Set alias (Premium) Can require authentication. Requires user with Premium upgrade. PUT /token/:token_id/alias Sets the alias for the token. (Can be used when creating requests.) Request { \"alias\" : \"my-webhook\" } Response See POST /token Toggle CORS Attaches CORS headers to the response of the Token, allowing browsers to request it from all domains. PUT /token/:token_id/cors/toggle Response { \"enabled\" : true } Get token Can require authentication. GET /token/:token_id Response See POST /token Delete token Can require authentication. DELETE /token/:token_id Response 204 No Content Requests Create request (any method) /:tokenId (any method) /:tokenId/:statusCode (any method) /:tokenId/(anything) If statusCode is valid, that HTTP status will be used in the response (instead of the default.) Instead of tokenId , an alias can also be supplied. Request (Anything.) Response (The default response of the Token.) Get requests Can require authentication. GET /token/:token_id/requests Lists all request sent to a token. Response { \"data\" : [ { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" } ], \"total\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"is_last_page\" : true , \"from\" : 1 , \"to\" : 1 } Get single request Can require authentication. GET /token/:token_id/request/:request_id GET /token/:token_id/request/latest - retrieves the latest request sent to the URL Response { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" } Get raw request content Can require authentication. GET /token/:token_id/request/:request_id/raw GET /token/:token_id/request/latest/raw - retrieves the latest request sent to the URL Returns the request as a response (body, content-type.) Delete request Can require authentication. DELETE /token/:token_id/request/(:request_id) Deletes a request. If no ID, all requests related to the token will be deleted. Response 204 No Content","title":"API"},{"location":"api.html#webhooksite-api","text":"The Webhook.site API is public, free to use, doesn't require authentication and is relatively easy to use. Note Please note that fair use guidelines and other limitations apply as described by the Terms of Service . At its core, Webhook.site takes your data (HTTP requests) and returns it back to you, and also letting you execute various actions based on the contents with Custom Actions . Base URL: https://webhook.site . We recommend that you set the Accept header to application/json .","title":"Webhook.site API"},{"location":"api.html#about-tokens","text":"A token is a container for incoming requests and emails, and corresponds to a Webhook.site URL or Email. A token ID is a 36 character UUID consisting of hexadecimal characters and dashes. Simply, the token ID is the part after https://webhook.site/ in the URL, or before @email.webhook.site in the email address.","title":"About Tokens"},{"location":"api.html#authentication","text":"While most functions in the API work without any authentication whatsoever, some endpoints do require authentication, or will return a 401 Unauthorized status code.","title":"Authentication"},{"location":"api.html#api-key","text":"An API Key can be generated in the Control Panel, and provides access to Tokens that are either a) password protected or b) require login. To specify an API Key in a request, use a HTTP header: Api-Key: [your API Key]","title":"API Key"},{"location":"api.html#password","text":"If you have enabled password authentication on a Webhook.site URL/Token, to access the resource, either a) use the ?password=[your password] query string b) set the password using HTTP Basic Auth.","title":"Password"},{"location":"api.html#tokens","text":"","title":"Tokens"},{"location":"api.html#create-token","text":"POST /token After creating your token, the URL at https://webhook.site/{token.uuid} becomes accessible, and emails can be sent to {token.uuid}@email.webhook.site . default_* parameters sets the response of the URL. timeout waits an amount of seconds before returning the response (intended for testing timeouts) expiry set to true will cause the token to automatically be deleted within 7 days of no activity, even if creating the token as a Premium user. If you're using tokens for automated testing, for example, you can enable this to avoid filling up your user profile. cors set to true will add CORS headers to the request so browsers will send cross-domain requests to the URL","title":"Create token"},{"location":"api.html#request","text":"{ \"default_status\" : 200 , \"default_content\" : \"Hello world!\" , \"default_content_type\" : \"text/html\" , \"timeout\" : 0 , \"cors\" : false , \"expiry\" : true }","title":"Request"},{"location":"api.html#response","text":"200 OK { \"redirect\" : false , \"alias\" : null , \"timeout\" : 0 , \"premium\" : true , \"uuid\" : \"9981f9f4-657a-4ebf-be7c-1915bedd4775\" , \"ip\" : \"127.0.0.1\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"default_content\" : \"Hello world!\" , \"default_status\" : 200 , \"default_content_type\" : \"text\\/plain\" , \"premium_expires_at\" : \"2019-10-22 10:52:20\" , \"created_at\" : \"2019-09-22 10:52:20\" , \"updated_at\" : \"2019-09-22 10:52:20\" } Note about expiry: If there's no incoming requests for about a week, and the token is not upgraded to premium, the token is automatically deleted along with any other data.","title":"Response"},{"location":"api.html#update-token","text":"Can require authentication. PUT /token/:token_id","title":"Update token"},{"location":"api.html#request_1","text":"See POST /token","title":"Request"},{"location":"api.html#response_1","text":"See POST /token","title":"Response"},{"location":"api.html#set-password-premium","text":"Can require authentication. Requires user with Premium upgrade. PUT /token/:token_id/password Sets a password to view the requests of a token.","title":"Set password (Premium)"},{"location":"api.html#request_2","text":"{ \"password\" : \"hunter2\" , \"old_password\" : \"hunter1\" }","title":"Request"},{"location":"api.html#response_2","text":"See POST /token","title":"Response"},{"location":"api.html#set-alias-premium","text":"Can require authentication. Requires user with Premium upgrade. PUT /token/:token_id/alias Sets the alias for the token. (Can be used when creating requests.)","title":"Set alias (Premium)"},{"location":"api.html#request_3","text":"{ \"alias\" : \"my-webhook\" }","title":"Request"},{"location":"api.html#response_3","text":"See POST /token","title":"Response"},{"location":"api.html#toggle-cors","text":"Attaches CORS headers to the response of the Token, allowing browsers to request it from all domains. PUT /token/:token_id/cors/toggle","title":"Toggle CORS"},{"location":"api.html#response_4","text":"{ \"enabled\" : true }","title":"Response"},{"location":"api.html#get-token","text":"Can require authentication. GET /token/:token_id","title":"Get token"},{"location":"api.html#response_5","text":"See POST /token","title":"Response"},{"location":"api.html#delete-token","text":"Can require authentication. DELETE /token/:token_id","title":"Delete token"},{"location":"api.html#response_6","text":"204 No Content","title":"Response"},{"location":"api.html#requests","text":"","title":"Requests"},{"location":"api.html#create-request","text":"(any method) /:tokenId (any method) /:tokenId/:statusCode (any method) /:tokenId/(anything) If statusCode is valid, that HTTP status will be used in the response (instead of the default.) Instead of tokenId , an alias can also be supplied.","title":"Create request"},{"location":"api.html#request_4","text":"(Anything.)","title":"Request"},{"location":"api.html#response_7","text":"(The default response of the Token.)","title":"Response"},{"location":"api.html#get-requests","text":"Can require authentication. GET /token/:token_id/requests Lists all request sent to a token.","title":"Get requests"},{"location":"api.html#response_8","text":"{ \"data\" : [ { \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" } ], \"total\" : 1 , \"per_page\" : 50 , \"current_page\" : 1 , \"is_last_page\" : true , \"from\" : 1 , \"to\" : 1 }","title":"Response"},{"location":"api.html#get-single-request","text":"Can require authentication. GET /token/:token_id/request/:request_id GET /token/:token_id/request/latest - retrieves the latest request sent to the URL","title":"Get single request"},{"location":"api.html#response_9","text":"{ \"uuid\" : \"a2a6a4ae-4130-4063-953a-84fa29d81d43\" , \"token_id\" : \"a94a7294-c4aa-4074-ab77-c4cf86fd53b1\" , \"ip\" : \"127.0.0.1\" , \"hostname\" : \"webhook.site\" , \"method\" : \"POST\" , \"user_agent\" : \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" , \"content\" : \"{\\\"first_name\\\":\\\"Arch\\\",\\\"last_name\\\":\\\"Weber\\\"}\" , \"query\" : { \"action\" : \"create\" }, \"headers\" : { \"content-length\" : [ \"271\" ], \"user-agent\" : [ \"Paw\\/3.1.8 (Macintosh; OS X\\/10.14.6) GCDHTTPRequest\" ] }, \"url\" : \"https:\\/\\/webhook.site\\/a94a7294-c4aa-4074-ab77-c4cf86fd53b1\\/201?\" , \"created_at\" : \"2019-10-03 19:06:35\" , \"updated_at\" : \"2019-10-03 19:06:35\" }","title":"Response"},{"location":"api.html#get-raw-request-content","text":"Can require authentication. GET /token/:token_id/request/:request_id/raw GET /token/:token_id/request/latest/raw - retrieves the latest request sent to the URL Returns the request as a response (body, content-type.)","title":"Get raw request content"},{"location":"api.html#delete-request","text":"Can require authentication. DELETE /token/:token_id/request/(:request_id) Deletes a request. If no ID, all requests related to the token will be deleted.","title":"Delete request"},{"location":"api.html#response_10","text":"204 No Content","title":"Response"},{"location":"custom-actions.html","text":"Custom Actions With Custom Actions, it is possible to string together a set of actions that are executed whenever a Webhook.site URL receives a request or email. The actions can extract data from the request and use it to send another request as well as modify the response. With this, you can connect APIs that aren't compatible, convert a request to an email, and much more. About Variables Variables are an important part of Custom Actions, and are characterized by a name surrounded by two dollar signs: $example$ . Variables can be used in any field that has a \u24e5 icon in the editor. They act as placeholders that are replaced by dynamic content as the request or email is received. Each request or email has a set of base variables that contain information like the request IP, method, headers, query string values, form values and the request content. To see a list of variables, click the Variables button in the editor. Clicking on a variable copies it to the clipboard. Almost all of the available Custom Actions can register a variable during the runtime of the actions, so for example you can register the result of a JSONPath query and use it in a \"Modify Response\" action to make the response dynamic, or even use it to send a request to another HTTP address, and then use the response of that. This works since Custom Actions are executed synchronously in a chain, sharing data as they're being executed. The format of variables are dollar signs surrounded by a word, for example: $example$ . Default request variables These variables are automatically available for each request or email. Different variables are available depending on the type. Variable Name Available For Description request.uuid All The UUID of the request request.token_id All The Token UUID (URL ID) of the request request.content All The body content of the request request.date All Creation date in Y-m-d H:m:s format request.hostname All Hostname of the request (usually webhook.site ) request.header.[name] All Created for each HTTP header request.size All Request body size in bytes request.type All Request type ( email or web ) request.query.[name] Web Created for each query string (e.g. ?name=value) request.form.[name] Web Created for each form field request.file.[name].filenamee Web Created for each file upload, with name being the input name property. Contains the client file name request.file.[name].size Web Contains the file size in bytes request.file.[name].content Web Contains the file content request.ip Web IP of the host making the request request.user_agent Web User agent header request.url Web Full URL of the request (e.g. https://webhook.site/xxx-xxx...) request.method Web HTTP method (GET, POST, etc.) request.sender Email Sender address request.message_id Email Email message ID request.text_content Email Parsed plaintext content request.destinations Email Comma separated list of recipients. request.checks.[name] Email True or false for email checks (DKIM, SPF, etc.) WebhookScript Executes custom scripts using a scripting language that's very similar to JavaScript and PHP. More information here Extract JSONPath This action runs a JSONPath query on the contents of a request. With it, you can extract any data from a JSON document and store it in a variable, which can then be used in a downstream action. JSONPath is very similar to the jq commandline utility. JSONPath Examples JSONPath Result $.store.books[*].author the authors of all books in the store $..author all authors $.store..price the price of everything in the store. $..books[2] the third book $..books[(@.length-1)] the last book in order. $..books[-1:] the last book in order. $..books[0,1] the first two books $..books[:2] the first two books $..books[::2] every second book starting from first one $..books[1:6:3] every third book starting from 1 till 6 $..books[?(@.isbn)] filter all books with isbn number $..books[?(@.price<10)] filter all books cheapier than 10 $..* all elements in the data (recursively extracted) JSONPath Syntax Symbol Description $ The root object/element (not strictly necessary) @ The current object/element . or [] Child operator .. Recursive descent * Wildcard. All child elements regardless their index. [,] Array indices as a set [start:end:step] Array slice operator borrowed from ES4/Python. ?() Filters a result set by a script expression () Uses the result of a script expression as the index For more details on what's possible with JSONPath, take a look at the docs . As you start entering a JSONPath, the results are validated and shown next to the input field. Extract Regex This action runs a Regex (regular expression) query on the contents of a request. With it, you can extract any data from a text document and store it in a variable, which can then be used in a downstream action. As you start entering a Regex, the results are validated and shown next to the input field. Extract XPath Similar to the Extract JSONPath Custom Action, Extract XPath lets you extract values from an XML or HTML document and save the result as a variable. XPath Examples The following examples are based on this XML document: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> Example XPath | Notes | Result --------------------------------------------------|------------------------------------------------------------------------------ /organization | Finds all content within the organization element | Jack Ann //employee[@id != 1] | // traverses all <employee> elements in document, the @id query selects all except those with id =1 | Jack /organization/@name | @name to get the \"name\" property of the element | ExampleCo /organization/employees/employee[2] | [2] specifies 2nd element | Ann /organization/employees/employee[2]/@id | Get the \"id\" property of second employee element | 2 /organization/employees/employee[@id=1] | Employee element with id property equal to \"1\" | Jack /organization/employees/employee[last()] | Last employee element | Ann //employee[contains(@id, \"2\")] | Employee within any parent element where id contains \"2\" | Ann For more examples, see W3CSchools or XPath Cheatsheet Send Request This will send a request with variable contents from the Webhook.site cloud. Per default, the request contents will be identical to what was sent to the URL originally. Variables extracted previously can be used. The response of the request is stored in a series of variable names prefixed with a value of your choosing. The following variables are set after the request has been fired: $your_prefix.content$ - response body content $your_prefix.status$ - response status code $your_prefix.headers$ - response headers $your_prefix.url$ - the URL the request was sent to Send Email This will send a email with variable contents from the Webhook.site cloud. Variables extracted previously can be used. Modify Response This action can be used to modify the response of the Webhook.site URL based on the input. Condition Useful if you need to validate that the request does or does not conform to certain criteria, the Condition action will either stop or continue based on a condition. In both the input and the value fields, variables will be replaced (including Global Variables from the Control Panel), so you can compare e.g. JSONPath or Regex values - or even values from a previous HTTP request that was sent. Currently, two actions are provided: stop and continue. Stop will stop further action execution of the condition is a match. Continue will only continue further execution if the condition is a match, and otherwise stop. The following \"operators\" are available: is equal to is not equal to starts with ends with contains does not contain is greater than is greater than or equal to is less than is less than or equal to The \"result\" of the condition will be logged below the request details, so you can see what happened. Google Sheets (Beta) Google Sheets Custom Actions lets you manipulate and retrieve values from a Google Sheet. The following Google Sheets Custom Actions are available: Add Row - appends one or more new rows to an existing spreadsheet Update Row - updates one or more cells in an existing spreadsheet Get Values - retrieves one or more cell values from an existing spreadsheet To start, you need to make sure that you have connected a Google account in the Control Panel, available here . After that, you can select the account in the dropdown when creating the Custom Action. Specifying the spreadsheet When specifying the spreadsheet, you can either just copy/paste the spreadsheet URL or enter the spreadsheet ID. Variables can be used to specify the spreadsheet. Ranges All actions must specify a range, which behaves similar in all actions. For the Add Row action, Google Sheets will automatically find a \"table\" (e.g. a homogenous mass of data) and add the values at the bottom. A range is the same query as in Google Sheets, e.g. to select A1-C3 in Worksheet \"Example\", enter 'Example'!A1:C3 . Values When inserting or updating values, you can either enter a value in the text field, or supply multiple cells and/or rows using JSON. To insert two rows, the JSON would be [\"cell 1\", \"cell 2\"] . Variables The Get Values Action allows you to define variables based on the output. Since this action can return multiple pieces of data, multiple variables are created. For example, if you select two columns and two rows, e.g. A1:B2 , four variables would be defined: variable_name.0.0 = value of A1 variable_name.0.1 = value of A2 variable_name.1.0 = value of B1 variable_name.1.1 = value of B2 Additionally, the data is available in JSON, with the variable_name.json variable being defined, and continuing with the example above, would contain the following JSON: [ [ \"A1\" , \"A2\" ], [ \"B1\" , \"B2\" ] ] Amazon Web Services (AWS) (Beta) S3 The following actions are available for AWS S3: Create Bucket Create Object Delete Object Get Object (retrieves object contents to a Variable) In addition to the \"official\" Amazon endpoints, Webhook.site also supports S3-compatible storages like DigitalOcean, MinIO, Wasabi and more. The endpoint can be specified when setting up the account in Control Panel. CloudFront The \"Create Invalidation\" action allows you to dynamically create a CloudFront cache invalidation as a Custom Action. Both the Distribution ID and the paths to be invalidated are replaced with Webhook.site Variables. Discord (Beta) With the Discord Custom Action, you can send messages to a specified channel (Each bot account uses a specific channel, so you can connect more accounts to send to different channels or servers.) In addition, you can choose a custom username and avatar image for the bot user. Slack (Beta) With the Slack Custom Action, you can easily use Slack's Webhook URLs to send messages to a channel. Dropbox The Dropbox integration has access to the entire contents of your dropbox, and currently the following actions are available: Create Folder Download File Upload File Delete File Delete Folder Get Link - creates a temporary download link for any file in your Dropbox, and saves it in a variable.","title":"Custom Actions"},{"location":"custom-actions.html#custom-actions","text":"With Custom Actions, it is possible to string together a set of actions that are executed whenever a Webhook.site URL receives a request or email. The actions can extract data from the request and use it to send another request as well as modify the response. With this, you can connect APIs that aren't compatible, convert a request to an email, and much more.","title":"Custom Actions"},{"location":"custom-actions.html#about-variables","text":"Variables are an important part of Custom Actions, and are characterized by a name surrounded by two dollar signs: $example$ . Variables can be used in any field that has a \u24e5 icon in the editor. They act as placeholders that are replaced by dynamic content as the request or email is received. Each request or email has a set of base variables that contain information like the request IP, method, headers, query string values, form values and the request content. To see a list of variables, click the Variables button in the editor. Clicking on a variable copies it to the clipboard. Almost all of the available Custom Actions can register a variable during the runtime of the actions, so for example you can register the result of a JSONPath query and use it in a \"Modify Response\" action to make the response dynamic, or even use it to send a request to another HTTP address, and then use the response of that. This works since Custom Actions are executed synchronously in a chain, sharing data as they're being executed. The format of variables are dollar signs surrounded by a word, for example: $example$ .","title":"About Variables"},{"location":"custom-actions.html#default-request-variables","text":"These variables are automatically available for each request or email. Different variables are available depending on the type. Variable Name Available For Description request.uuid All The UUID of the request request.token_id All The Token UUID (URL ID) of the request request.content All The body content of the request request.date All Creation date in Y-m-d H:m:s format request.hostname All Hostname of the request (usually webhook.site ) request.header.[name] All Created for each HTTP header request.size All Request body size in bytes request.type All Request type ( email or web ) request.query.[name] Web Created for each query string (e.g. ?name=value) request.form.[name] Web Created for each form field request.file.[name].filenamee Web Created for each file upload, with name being the input name property. Contains the client file name request.file.[name].size Web Contains the file size in bytes request.file.[name].content Web Contains the file content request.ip Web IP of the host making the request request.user_agent Web User agent header request.url Web Full URL of the request (e.g. https://webhook.site/xxx-xxx...) request.method Web HTTP method (GET, POST, etc.) request.sender Email Sender address request.message_id Email Email message ID request.text_content Email Parsed plaintext content request.destinations Email Comma separated list of recipients. request.checks.[name] Email True or false for email checks (DKIM, SPF, etc.)","title":"Default request variables"},{"location":"custom-actions.html#webhookscript","text":"Executes custom scripts using a scripting language that's very similar to JavaScript and PHP. More information here","title":"WebhookScript"},{"location":"custom-actions.html#extract-jsonpath","text":"This action runs a JSONPath query on the contents of a request. With it, you can extract any data from a JSON document and store it in a variable, which can then be used in a downstream action. JSONPath is very similar to the jq commandline utility.","title":"Extract JSONPath"},{"location":"custom-actions.html#jsonpath-examples","text":"JSONPath Result $.store.books[*].author the authors of all books in the store $..author all authors $.store..price the price of everything in the store. $..books[2] the third book $..books[(@.length-1)] the last book in order. $..books[-1:] the last book in order. $..books[0,1] the first two books $..books[:2] the first two books $..books[::2] every second book starting from first one $..books[1:6:3] every third book starting from 1 till 6 $..books[?(@.isbn)] filter all books with isbn number $..books[?(@.price<10)] filter all books cheapier than 10 $..* all elements in the data (recursively extracted)","title":"JSONPath Examples"},{"location":"custom-actions.html#jsonpath-syntax","text":"Symbol Description $ The root object/element (not strictly necessary) @ The current object/element . or [] Child operator .. Recursive descent * Wildcard. All child elements regardless their index. [,] Array indices as a set [start:end:step] Array slice operator borrowed from ES4/Python. ?() Filters a result set by a script expression () Uses the result of a script expression as the index For more details on what's possible with JSONPath, take a look at the docs . As you start entering a JSONPath, the results are validated and shown next to the input field.","title":"JSONPath Syntax"},{"location":"custom-actions.html#extract-regex","text":"This action runs a Regex (regular expression) query on the contents of a request. With it, you can extract any data from a text document and store it in a variable, which can then be used in a downstream action. As you start entering a Regex, the results are validated and shown next to the input field.","title":"Extract Regex"},{"location":"custom-actions.html#extract-xpath","text":"Similar to the Extract JSONPath Custom Action, Extract XPath lets you extract values from an XML or HTML document and save the result as a variable.","title":"Extract XPath"},{"location":"custom-actions.html#xpath-examples","text":"The following examples are based on this XML document: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> Example XPath | Notes | Result --------------------------------------------------|------------------------------------------------------------------------------ /organization | Finds all content within the organization element | Jack Ann //employee[@id != 1] | // traverses all <employee> elements in document, the @id query selects all except those with id =1 | Jack /organization/@name | @name to get the \"name\" property of the element | ExampleCo /organization/employees/employee[2] | [2] specifies 2nd element | Ann /organization/employees/employee[2]/@id | Get the \"id\" property of second employee element | 2 /organization/employees/employee[@id=1] | Employee element with id property equal to \"1\" | Jack /organization/employees/employee[last()] | Last employee element | Ann //employee[contains(@id, \"2\")] | Employee within any parent element where id contains \"2\" | Ann For more examples, see W3CSchools or XPath Cheatsheet","title":"XPath Examples"},{"location":"custom-actions.html#send-request","text":"This will send a request with variable contents from the Webhook.site cloud. Per default, the request contents will be identical to what was sent to the URL originally. Variables extracted previously can be used. The response of the request is stored in a series of variable names prefixed with a value of your choosing. The following variables are set after the request has been fired: $your_prefix.content$ - response body content $your_prefix.status$ - response status code $your_prefix.headers$ - response headers $your_prefix.url$ - the URL the request was sent to","title":"Send Request"},{"location":"custom-actions.html#send-email","text":"This will send a email with variable contents from the Webhook.site cloud. Variables extracted previously can be used.","title":"Send Email"},{"location":"custom-actions.html#modify-response","text":"This action can be used to modify the response of the Webhook.site URL based on the input.","title":"Modify Response"},{"location":"custom-actions.html#condition","text":"Useful if you need to validate that the request does or does not conform to certain criteria, the Condition action will either stop or continue based on a condition. In both the input and the value fields, variables will be replaced (including Global Variables from the Control Panel), so you can compare e.g. JSONPath or Regex values - or even values from a previous HTTP request that was sent. Currently, two actions are provided: stop and continue. Stop will stop further action execution of the condition is a match. Continue will only continue further execution if the condition is a match, and otherwise stop. The following \"operators\" are available: is equal to is not equal to starts with ends with contains does not contain is greater than is greater than or equal to is less than is less than or equal to The \"result\" of the condition will be logged below the request details, so you can see what happened.","title":"Condition"},{"location":"custom-actions.html#google-sheets-beta","text":"Google Sheets Custom Actions lets you manipulate and retrieve values from a Google Sheet. The following Google Sheets Custom Actions are available: Add Row - appends one or more new rows to an existing spreadsheet Update Row - updates one or more cells in an existing spreadsheet Get Values - retrieves one or more cell values from an existing spreadsheet To start, you need to make sure that you have connected a Google account in the Control Panel, available here . After that, you can select the account in the dropdown when creating the Custom Action.","title":"Google Sheets (Beta)"},{"location":"custom-actions.html#specifying-the-spreadsheet","text":"When specifying the spreadsheet, you can either just copy/paste the spreadsheet URL or enter the spreadsheet ID. Variables can be used to specify the spreadsheet.","title":"Specifying the spreadsheet"},{"location":"custom-actions.html#ranges","text":"All actions must specify a range, which behaves similar in all actions. For the Add Row action, Google Sheets will automatically find a \"table\" (e.g. a homogenous mass of data) and add the values at the bottom. A range is the same query as in Google Sheets, e.g. to select A1-C3 in Worksheet \"Example\", enter 'Example'!A1:C3 .","title":"Ranges"},{"location":"custom-actions.html#values","text":"When inserting or updating values, you can either enter a value in the text field, or supply multiple cells and/or rows using JSON. To insert two rows, the JSON would be [\"cell 1\", \"cell 2\"] .","title":"Values"},{"location":"custom-actions.html#variables","text":"The Get Values Action allows you to define variables based on the output. Since this action can return multiple pieces of data, multiple variables are created. For example, if you select two columns and two rows, e.g. A1:B2 , four variables would be defined: variable_name.0.0 = value of A1 variable_name.0.1 = value of A2 variable_name.1.0 = value of B1 variable_name.1.1 = value of B2 Additionally, the data is available in JSON, with the variable_name.json variable being defined, and continuing with the example above, would contain the following JSON: [ [ \"A1\" , \"A2\" ], [ \"B1\" , \"B2\" ] ]","title":"Variables"},{"location":"custom-actions.html#amazon-web-services-aws-beta","text":"","title":"Amazon Web Services (AWS) (Beta)"},{"location":"custom-actions.html#s3","text":"The following actions are available for AWS S3: Create Bucket Create Object Delete Object Get Object (retrieves object contents to a Variable) In addition to the \"official\" Amazon endpoints, Webhook.site also supports S3-compatible storages like DigitalOcean, MinIO, Wasabi and more. The endpoint can be specified when setting up the account in Control Panel.","title":"S3"},{"location":"custom-actions.html#cloudfront","text":"The \"Create Invalidation\" action allows you to dynamically create a CloudFront cache invalidation as a Custom Action. Both the Distribution ID and the paths to be invalidated are replaced with Webhook.site Variables.","title":"CloudFront"},{"location":"custom-actions.html#discord-beta","text":"With the Discord Custom Action, you can send messages to a specified channel (Each bot account uses a specific channel, so you can connect more accounts to send to different channels or servers.) In addition, you can choose a custom username and avatar image for the bot user.","title":"Discord (Beta)"},{"location":"custom-actions.html#slack-beta","text":"With the Slack Custom Action, you can easily use Slack's Webhook URLs to send messages to a channel.","title":"Slack (Beta)"},{"location":"custom-actions.html#dropbox","text":"The Dropbox integration has access to the entire contents of your dropbox, and currently the following actions are available: Create Folder Download File Upload File Delete File Delete Folder Get Link - creates a temporary download link for any file in your Dropbox, and saves it in a variable.","title":"Dropbox"},{"location":"install.html","text":"Installation You can choose to run the Open Source version of Webhook.site either via Docker, or install it on any Web server with PHP7 support. Optional Features You can use laravel-echo-server or Pusher to enable realtime updates. Take a look at the .env.example on how to configure it. For laravel-echo-server, the app expects socket.io to be available at the /socket.io path. This can be done with nginx like so: location /socket.io { proxy_pass http://127.0.0.1:6001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } Methods Web Server Requirements PHP 7 Redis Composer Web server \u2013 e.g. nginx, apache2 DigitalOcean has a guide on how to configure nginx . Installation Guide Run the following commands: composer install cp .env.example .env - adjust settings as needed php artisan key:generate Setup virtual host pointing to the /public folder. Docker The provided Docker Compose file sets up a complete environment that runs the Webhook.site image and all dependencies (Redis, Laravel Echo Server, etc.). Note that if running this in production, you should probably run a Redis server that persists data to disk. The Docker image is also not tuned for large amount of traffic. Installation Guide Run docker-compose up The app is available on http://127.0.0.1:8084 . Kubernetes A set of Kubernetes configuration files can be found in the kubernetes subfolder . Installation Guide Configure the resources, and apply with kubectl apply -f ./ .","title":"Install"},{"location":"install.html#installation","text":"You can choose to run the Open Source version of Webhook.site either via Docker, or install it on any Web server with PHP7 support.","title":"Installation"},{"location":"install.html#optional-features","text":"You can use laravel-echo-server or Pusher to enable realtime updates. Take a look at the .env.example on how to configure it. For laravel-echo-server, the app expects socket.io to be available at the /socket.io path. This can be done with nginx like so: location /socket.io { proxy_pass http://127.0.0.1:6001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; }","title":"Optional Features"},{"location":"install.html#methods","text":"","title":"Methods"},{"location":"install.html#web-server","text":"","title":"Web Server"},{"location":"install.html#requirements","text":"PHP 7 Redis Composer Web server \u2013 e.g. nginx, apache2 DigitalOcean has a guide on how to configure nginx .","title":"Requirements"},{"location":"install.html#installation-guide","text":"Run the following commands: composer install cp .env.example .env - adjust settings as needed php artisan key:generate Setup virtual host pointing to the /public folder.","title":"Installation Guide"},{"location":"install.html#docker","text":"The provided Docker Compose file sets up a complete environment that runs the Webhook.site image and all dependencies (Redis, Laravel Echo Server, etc.). Note that if running this in production, you should probably run a Redis server that persists data to disk. The Docker image is also not tuned for large amount of traffic.","title":"Docker"},{"location":"install.html#installation-guide_1","text":"Run docker-compose up The app is available on http://127.0.0.1:8084 .","title":"Installation Guide"},{"location":"install.html#kubernetes","text":"A set of Kubernetes configuration files can be found in the kubernetes subfolder .","title":"Kubernetes"},{"location":"install.html#installation-guide_2","text":"Configure the resources, and apply with kubectl apply -f ./ .","title":"Installation Guide"},{"location":"news.html","text":"News & Changelog Subscribe below to receive updates about improvements and new features on Webhook.site. Expect a newsletter every month at the most. #mc_embed_signup form {text-align: left;padding: 0;} 3 July 2020 Webhook.site was down for about 30 minutes starting 07:20 UTC due to a memory upgrade. Max request size has been increased to 10 MB from 2 MB. 23 June 2020 Added new Dropbox Custom Actions: Create Folder, Download, Upload, Delete, Get Link. 14 June 2020 WebhookScript editor syntax highlighting improved with regards to multiline strings, escape characters and more New WebhookScript editor keyboard shortcut for saving (Mac: Cmd-S, Windows: Ctrl-S.) Fix WebhookScript fullscreen mode not being disengaged when saving URLs can now accept file uploads via multipart. File contents are available via variables: request.file.<formname>.content , request.file.<formname>.size , request.file.<formname>.filename New WebhookScript function: csv_to_array() , which converts a CSV file from a string to an array that can easily be parsed. Added an example script demoing file uploads and CSV parsing 7 June 2020 Added new Slack Send Message Custom Action, which lets you send Slack messages via a Slack Webhook URL. 5 June 2020 Added \"Formula Mode\" checkbox for Add and Update Row Google Sheets actions, which parses values like entered in a cell, and allows inserting formulas. 4 June 2020 Added new endpoints to fetch the content and information about the latest request on a URL. See here and here . 2 June 2020 Added Amazon Web Services CloudFront Cache Invalidation Custom Action. Added ability to toggle Auto Cleanup, which automatically cleans up requests/emails. 30 May 2020 Added Discord Custom Action for sending messages. Read more in the docs 29 May 2020 New set of date functions added to WebhookScript, namely: to_date() , date_format() , date_to_array() , date_interval() , date_interval_human() . Read more in the docs 25 May 2020 New set of Amazon Web Services S3 actions: Create Bucket, Put Object, Delete Object and Get Object (which retrieves object contents to a Variable.) 22 May 2020 New Schedule intervals: every 1 minute and every 10 minutes, in addition to the already existing ones . 17 May 2020 New WebhookScript function: delay() , which lets you delay and execute WebhookScript code a set amount of seconds in the future. New WebhookScript function: exec() , which lets you dynamically execute code in a string. New WebhookScript function: import() , which downloads and executes code from a URL - great if you want to reuse your code, just put it on Github and import it with the URL! 16 May 2020 It's now possible to set a Token (URL or email address) to expire automatically, even for Premium users. This is useful for creating tokens for automated testing. 3 May 2020 New Google Sheets Custom Actions (Beta). 3 initial actions are available: Append Row, Update Row and Get Values, which allow you to manipulate or retrieve the values of a Google Sheet without writing any code. 24 April 2020 New fullscreen mode in WebhookScript editor Ability to edit your user profile New WebhookScript functions: base64_encode() , base64_decode() . 21 April 2020 New WebhookScript function: store() - creates or updates an existing Global Variable 20 April 2020 New Global Variables section in Control Panel. 19 April 2020 New WebhookScript math functions: max(), min(), mod(), pi(), rand() - for more, see the Reference 28 March 2020 New feature: Webhook.site Schedules lets you request any URL \u2013 including Webhook.site URLs \u2013 automatically on an interval, so you can for example run Custom Actions every 5 minutes, or make a health check for your Web site. Send Request action request timeout has been raised from 5 to 10 seconds. Applies to both the Custom Action and the WebhookScript request() function. 24 March 2020 New feature: API Keys can now be created so you can use the API with URLs that have the \"Require Authentication\" or \"Password\" options set. Fix: It's now possible to test Send Email actions before creating them. Prior to this, the Test button would not do anything for the Send Email action. 6 March 2020 New feature: Extract XPath Custom Action with accompanying xpath() WebhookScript function. Read more. 29 Feburary 2020 Values are no longer required for Condition actions, so it's possible to compare an empty string or missing value. Fixed an issue where a tooltip in the Custom Actions modal would not disappear. Removed Beta label from WebhookScript. 27 Feburary 2020 Fixed a bug where slashes at the end of Webhook.site Single Page App URLs didn't work. Fixed a bug where Copy To CURL sometimes wouldn't return a valid CURL command. 26 Feburary 2020 It's no longer a requirement to specify a variable for the Send Request action. 25 Feburary 2020 New feature: It's now possible to receive emails, which are treated like Webhooks \u2013 so you can automate emails with Custom Actions on Webhook.site. You can also test email deliverability using DKIM, DMARC and SPF validation. JSON formatting is now always enabled per default. The requests view is cleared after deleting the last request, and the tutorial text is shown. 16 Feburary 2020 WebhookScript: Added regex_extract and regex_extract_first functions. 15 Feburary 2020 WebhookScript: Added hash function. 14 Feburary 2020 New feature: Export to CSV lets you export all requests on a given URL to a CSV file. Fixed a bug where duplicate in-app notifications would appear on new requests. 12 Feburary 2020 WebhookScript: Added url_encode , url_decode , and query functions. 8 Febuary 2020 New Custom Action type: Condition, which lets you conditionally stop a set of actions based on comparisons. 28 January 2020 WebhookScript now supports newline literals ( \\\\n ) in strings, escaped by 2 backslashes. 25 January 2020 Global Variables are now available in the Control Panel, which lets you keep configuration like API keys in a separate place from your Custom Actions and scripts while managing them at a central place. Changed the font of the WebhookScript editor, which resulted in uneven selection of text. 23 January 2020 You can now specify a source variable for JSONPath and Regex actions, so you can extract text from not only the request content. 12 January 2020 Switched to using Ace as editor for WebhookScript.","title":"News & Changelog"},{"location":"news.html#news-changelog","text":"Subscribe below to receive updates about improvements and new features on Webhook.site. Expect a newsletter every month at the most. #mc_embed_signup form {text-align: left;padding: 0;}","title":"News &amp; Changelog"},{"location":"news.html#3-july-2020","text":"Webhook.site was down for about 30 minutes starting 07:20 UTC due to a memory upgrade. Max request size has been increased to 10 MB from 2 MB.","title":"3 July 2020"},{"location":"news.html#23-june-2020","text":"Added new Dropbox Custom Actions: Create Folder, Download, Upload, Delete, Get Link.","title":"23 June 2020"},{"location":"news.html#14-june-2020","text":"WebhookScript editor syntax highlighting improved with regards to multiline strings, escape characters and more New WebhookScript editor keyboard shortcut for saving (Mac: Cmd-S, Windows: Ctrl-S.) Fix WebhookScript fullscreen mode not being disengaged when saving URLs can now accept file uploads via multipart. File contents are available via variables: request.file.<formname>.content , request.file.<formname>.size , request.file.<formname>.filename New WebhookScript function: csv_to_array() , which converts a CSV file from a string to an array that can easily be parsed. Added an example script demoing file uploads and CSV parsing","title":"14 June 2020"},{"location":"news.html#7-june-2020","text":"Added new Slack Send Message Custom Action, which lets you send Slack messages via a Slack Webhook URL.","title":"7 June 2020"},{"location":"news.html#5-june-2020","text":"Added \"Formula Mode\" checkbox for Add and Update Row Google Sheets actions, which parses values like entered in a cell, and allows inserting formulas.","title":"5 June 2020"},{"location":"news.html#4-june-2020","text":"Added new endpoints to fetch the content and information about the latest request on a URL. See here and here .","title":"4 June 2020"},{"location":"news.html#2-june-2020","text":"Added Amazon Web Services CloudFront Cache Invalidation Custom Action. Added ability to toggle Auto Cleanup, which automatically cleans up requests/emails.","title":"2 June 2020"},{"location":"news.html#30-may-2020","text":"Added Discord Custom Action for sending messages. Read more in the docs","title":"30 May 2020"},{"location":"news.html#29-may-2020","text":"New set of date functions added to WebhookScript, namely: to_date() , date_format() , date_to_array() , date_interval() , date_interval_human() . Read more in the docs","title":"29 May 2020"},{"location":"news.html#25-may-2020","text":"New set of Amazon Web Services S3 actions: Create Bucket, Put Object, Delete Object and Get Object (which retrieves object contents to a Variable.)","title":"25 May 2020"},{"location":"news.html#22-may-2020","text":"New Schedule intervals: every 1 minute and every 10 minutes, in addition to the already existing ones .","title":"22 May 2020"},{"location":"news.html#17-may-2020","text":"New WebhookScript function: delay() , which lets you delay and execute WebhookScript code a set amount of seconds in the future. New WebhookScript function: exec() , which lets you dynamically execute code in a string. New WebhookScript function: import() , which downloads and executes code from a URL - great if you want to reuse your code, just put it on Github and import it with the URL!","title":"17 May 2020"},{"location":"news.html#16-may-2020","text":"It's now possible to set a Token (URL or email address) to expire automatically, even for Premium users. This is useful for creating tokens for automated testing.","title":"16 May 2020"},{"location":"news.html#3-may-2020","text":"New Google Sheets Custom Actions (Beta). 3 initial actions are available: Append Row, Update Row and Get Values, which allow you to manipulate or retrieve the values of a Google Sheet without writing any code.","title":"3 May 2020"},{"location":"news.html#24-april-2020","text":"New fullscreen mode in WebhookScript editor Ability to edit your user profile New WebhookScript functions: base64_encode() , base64_decode() .","title":"24 April 2020"},{"location":"news.html#21-april-2020","text":"New WebhookScript function: store() - creates or updates an existing Global Variable","title":"21 April 2020"},{"location":"news.html#20-april-2020","text":"New Global Variables section in Control Panel.","title":"20 April 2020"},{"location":"news.html#19-april-2020","text":"New WebhookScript math functions: max(), min(), mod(), pi(), rand() - for more, see the Reference","title":"19 April 2020"},{"location":"news.html#28-march-2020","text":"New feature: Webhook.site Schedules lets you request any URL \u2013 including Webhook.site URLs \u2013 automatically on an interval, so you can for example run Custom Actions every 5 minutes, or make a health check for your Web site. Send Request action request timeout has been raised from 5 to 10 seconds. Applies to both the Custom Action and the WebhookScript request() function.","title":"28 March 2020"},{"location":"news.html#24-march-2020","text":"New feature: API Keys can now be created so you can use the API with URLs that have the \"Require Authentication\" or \"Password\" options set. Fix: It's now possible to test Send Email actions before creating them. Prior to this, the Test button would not do anything for the Send Email action.","title":"24 March 2020"},{"location":"news.html#6-march-2020","text":"New feature: Extract XPath Custom Action with accompanying xpath() WebhookScript function. Read more.","title":"6 March 2020"},{"location":"news.html#29-feburary-2020","text":"Values are no longer required for Condition actions, so it's possible to compare an empty string or missing value. Fixed an issue where a tooltip in the Custom Actions modal would not disappear. Removed Beta label from WebhookScript.","title":"29 Feburary 2020"},{"location":"news.html#27-feburary-2020","text":"Fixed a bug where slashes at the end of Webhook.site Single Page App URLs didn't work. Fixed a bug where Copy To CURL sometimes wouldn't return a valid CURL command.","title":"27 Feburary 2020"},{"location":"news.html#26-feburary-2020","text":"It's no longer a requirement to specify a variable for the Send Request action.","title":"26 Feburary 2020"},{"location":"news.html#25-feburary-2020","text":"New feature: It's now possible to receive emails, which are treated like Webhooks \u2013 so you can automate emails with Custom Actions on Webhook.site. You can also test email deliverability using DKIM, DMARC and SPF validation. JSON formatting is now always enabled per default. The requests view is cleared after deleting the last request, and the tutorial text is shown.","title":"25 Feburary 2020"},{"location":"news.html#16-feburary-2020","text":"WebhookScript: Added regex_extract and regex_extract_first functions.","title":"16 Feburary 2020"},{"location":"news.html#15-feburary-2020","text":"WebhookScript: Added hash function.","title":"15 Feburary 2020"},{"location":"news.html#14-feburary-2020","text":"New feature: Export to CSV lets you export all requests on a given URL to a CSV file. Fixed a bug where duplicate in-app notifications would appear on new requests.","title":"14 Feburary 2020"},{"location":"news.html#12-feburary-2020","text":"WebhookScript: Added url_encode , url_decode , and query functions.","title":"12 Feburary 2020"},{"location":"news.html#8-febuary-2020","text":"New Custom Action type: Condition, which lets you conditionally stop a set of actions based on comparisons.","title":"8 Febuary 2020"},{"location":"news.html#28-january-2020","text":"WebhookScript now supports newline literals ( \\\\n ) in strings, escaped by 2 backslashes.","title":"28 January 2020"},{"location":"news.html#25-january-2020","text":"Global Variables are now available in the Control Panel, which lets you keep configuration like API keys in a separate place from your Custom Actions and scripts while managing them at a central place. Changed the font of the WebhookScript editor, which resulted in uneven selection of text.","title":"25 January 2020"},{"location":"news.html#23-january-2020","text":"You can now specify a source variable for JSONPath and Regex actions, so you can extract text from not only the request content.","title":"23 January 2020"},{"location":"news.html#12-january-2020","text":"Switched to using Ace as editor for WebhookScript.","title":"12 January 2020"},{"location":"premium.html","text":"Webhook.site Premium With Webhook.site Premium, you get more features that allows you to do more with your URL, as well as keep it private. Click here to subscribe Feature List Custom Actions Run scripts, send emails, HTTP requests and more on each request, and use native integrations like Google Sheets, Dropbox, Slack and others. Read more... Schedules Request any URL or your Custom Actions automatically on an interval. Private URLs Either mark all URLs associated with your account as private, or just some, if you want to share the requests with others. Password Protection Share request data without it being public, but lets you protect it with a password without giving away the login to your Webhook.site account. Non-expiring URLs Non-upgraded URLs automatically expire in 7 days if no requests have been received. Your Webhook.site URL will always be static. Server-side Redirects Redirect or send requests to other URLs. Vanity URLs With vanity URLs, create a rememberable URL of your own choosing. Example: webhook.site/your-alias Unlimited Requests Non-upgraded URLs can only receive a maximum of 500 requests. With Premium, there is no limit. Unlimited URLs You are not limited to any specific amount of URLs you can create - you can set up as many as you need. CSV Export Export all requests sent to a URL to a friendly CSV format that can be used elsewhere.","title":"Premium"},{"location":"premium.html#webhooksite-premium","text":"With Webhook.site Premium, you get more features that allows you to do more with your URL, as well as keep it private. Click here to subscribe","title":"Webhook.site Premium"},{"location":"premium.html#feature-list","text":"","title":"Feature List"},{"location":"premium.html#custom-actions","text":"Run scripts, send emails, HTTP requests and more on each request, and use native integrations like Google Sheets, Dropbox, Slack and others. Read more...","title":"Custom Actions"},{"location":"premium.html#schedules","text":"Request any URL or your Custom Actions automatically on an interval.","title":"Schedules"},{"location":"premium.html#private-urls","text":"Either mark all URLs associated with your account as private, or just some, if you want to share the requests with others.","title":"Private URLs"},{"location":"premium.html#password-protection","text":"Share request data without it being public, but lets you protect it with a password without giving away the login to your Webhook.site account.","title":"Password Protection"},{"location":"premium.html#non-expiring-urls","text":"Non-upgraded URLs automatically expire in 7 days if no requests have been received. Your Webhook.site URL will always be static.","title":"Non-expiring URLs"},{"location":"premium.html#server-side-redirects","text":"Redirect or send requests to other URLs.","title":"Server-side Redirects"},{"location":"premium.html#vanity-urls","text":"With vanity URLs, create a rememberable URL of your own choosing. Example: webhook.site/your-alias","title":"Vanity URLs"},{"location":"premium.html#unlimited-requests","text":"Non-upgraded URLs can only receive a maximum of 500 requests. With Premium, there is no limit.","title":"Unlimited Requests"},{"location":"premium.html#unlimited-urls","text":"You are not limited to any specific amount of URLs you can create - you can set up as many as you need.","title":"Unlimited URLs"},{"location":"premium.html#csv-export","text":"Export all requests sent to a URL to a friendly CSV format that can be used elsewhere.","title":"CSV Export"},{"location":"schedules.html","text":"Webhook.site Schedules Included in your Webhook.site Premium subscription is Webhook.site Schedules , which enables you to periodically send requests to specified URLs (also including your Webhook.site URLs, so your Custom Actions can be executed periodially) with a custom method, headers, and interval. After creating the Schedule, you can view the logs for the last 100 scheduled requests. Schedules can be executed at the following intervals: 1 minute 5 minutes 10 minutes 1 hour 24 hours Schedules can be used for a variety of purposes, including cache warming, uptime monitoring, automatic data transfer, etc.","title":"Schedules"},{"location":"schedules.html#webhooksite-schedules","text":"Included in your Webhook.site Premium subscription is Webhook.site Schedules , which enables you to periodically send requests to specified URLs (also including your Webhook.site URLs, so your Custom Actions can be executed periodially) with a custom method, headers, and interval. After creating the Schedule, you can view the logs for the last 100 scheduled requests. Schedules can be executed at the following intervals: 1 minute 5 minutes 10 minutes 1 hour 24 hours Schedules can be used for a variety of purposes, including cache warming, uptime monitoring, automatic data transfer, etc.","title":"Webhook.site Schedules"},{"location":"webhookscript/index.html","text":"About WebhookScript WebhookScript is an easy to use scripting language designed for executing Web-related actions on incoming requests. While the other actions like Extract Regex and Send Email allows you to create flows in a visual editor, WebhookScript makes it quicker to create more advanced logic. WebhookScript can be combined with other Custom Actions as data can be shared between them using Variables . Syntax The syntax is very similar to PHP and JavaScript. See also the full language specification . products = [ 'apple' : [ 'price' : 10 ], 'blueberry' : [ 'price' : 1 ], 'cake' : [ 'price' : 550 ] ] shouldAddVat = var ( 'request.query.vat' ); selectedProduct = var ( 'request.query.product' ); if ( ! selectedProduct ) { respond ( 'Please select a product!' , 500 ) } price = products [ selectedProduct ][ 'price' ]; if ( shouldAddVat == 1 ) { price = price * 1.25 ; } respond ( 'Your price is {}' . format ( price ), 200 ); Editor Shortcuts The shortcuts are available when the editor is focused. Windows Mac Shortcut Alt-R Alt-R Test code (update Debug Panel) Ctrl-S Cmd-S Save action without exiting Debug Panel Below the editor is the \"debug panel\" containing data relating to the current and previous actions: Debug outputs shows the outputs of all the actions, with the current action being edited or created marked in blue. Response shows details of the response of the URL formatted in JSON. Variables is a table of all current available variables for use in the script with the var() function or variables array. Fullscreen Mode To enable fullscreen mode, click the little button in the upper right corner to make the editor take up more screen space. Click again to disengage.","title":"About WebhookScript"},{"location":"webhookscript/index.html#about-webhookscript","text":"WebhookScript is an easy to use scripting language designed for executing Web-related actions on incoming requests. While the other actions like Extract Regex and Send Email allows you to create flows in a visual editor, WebhookScript makes it quicker to create more advanced logic. WebhookScript can be combined with other Custom Actions as data can be shared between them using Variables .","title":"About WebhookScript"},{"location":"webhookscript/index.html#syntax","text":"The syntax is very similar to PHP and JavaScript. See also the full language specification . products = [ 'apple' : [ 'price' : 10 ], 'blueberry' : [ 'price' : 1 ], 'cake' : [ 'price' : 550 ] ] shouldAddVat = var ( 'request.query.vat' ); selectedProduct = var ( 'request.query.product' ); if ( ! selectedProduct ) { respond ( 'Please select a product!' , 500 ) } price = products [ selectedProduct ][ 'price' ]; if ( shouldAddVat == 1 ) { price = price * 1.25 ; } respond ( 'Your price is {}' . format ( price ), 200 );","title":"Syntax"},{"location":"webhookscript/index.html#editor","text":"","title":"Editor"},{"location":"webhookscript/index.html#shortcuts","text":"The shortcuts are available when the editor is focused. Windows Mac Shortcut Alt-R Alt-R Test code (update Debug Panel) Ctrl-S Cmd-S Save action without exiting","title":"Shortcuts"},{"location":"webhookscript/index.html#debug-panel","text":"Below the editor is the \"debug panel\" containing data relating to the current and previous actions: Debug outputs shows the outputs of all the actions, with the current action being edited or created marked in blue. Response shows details of the response of the URL formatted in JSON. Variables is a table of all current available variables for use in the script with the var() function or variables array.","title":"Debug Panel"},{"location":"webhookscript/index.html#fullscreen-mode","text":"To enable fullscreen mode, click the little button in the upper right corner to make the editor take up more screen space. Click again to disengage.","title":"Fullscreen Mode"},{"location":"webhookscript/date-locales.html","text":"List of available date function locales aa aa_DJ aa_ER aa_ER@saaho aa_ET af af_NA af_ZA agq agr agr_PE ak ak_GH am am_ET an an_ES anp anp_IN ar ar_AE ar_BH ar_DJ ar_DZ ar_EG ar_EH ar_ER ar_IL ar_IN ar_IQ ar_JO ar_KM ar_KW ar_LB ar_LY ar_MA ar_MR ar_OM ar_PS ar_QA ar_SA ar_SD ar_SO ar_SS ar_SY ar_Shakl ar_TD ar_TN ar_YE as as_IN asa ast ast_ES ayc ayc_PE az az_AZ az_Cyrl az_IR az_Latn bas be be_BY be_BY@latin bem bem_ZM ber ber_DZ ber_MA bez bg bg_BG bhb bhb_IN bho bho_IN bi bi_VU bm bn bn_BD bn_IN bo bo_CN bo_IN br br_FR brx brx_IN bs bs_BA bs_Cyrl bs_Latn byn byn_ER ca ca_AD ca_ES ca_ES_Valencia ca_FR ca_IT ccp ccp_IN ce ce_RU cgg chr chr_US cmn cmn_TW crh crh_UA cs cs_CZ csb csb_PL cu cv cv_RU cy cy_GB da da_DK da_GL dav de de_AT de_BE de_CH de_DE de_IT de_LI de_LU dje doi doi_IN dsb dsb_DE dua dv dv_MV dyo dz dz_BT ebu ee ee_TG el el_CY el_GR en en_001 en_150 en_AG en_AI en_AS en_AT en_AU en_BB en_BE en_BI en_BM en_BS en_BW en_BZ en_CA en_CC en_CH en_CK en_CM en_CX en_CY en_DE en_DG en_DK en_DM en_ER en_FI en_FJ en_FK en_FM en_GB en_GD en_GG en_GH en_GI en_GM en_GU en_GY en_HK en_IE en_IL en_IM en_IN en_IO en_ISO en_JE en_JM en_KE en_KI en_KN en_KY en_LC en_LR en_LS en_MG en_MH en_MO en_MP en_MS en_MT en_MU en_MW en_MY en_NA en_NF en_NG en_NL en_NR en_NU en_NZ en_PG en_PH en_PK en_PN en_PR en_PW en_RW en_SB en_SC en_SD en_SE en_SG en_SH en_SI en_SL en_SS en_SX en_SZ en_TC en_TK en_TO en_TT en_TV en_TZ en_UG en_UM en_US en_US_Posix en_VC en_VG en_VI en_VU en_WS en_ZA en_ZM en_ZW eo es es_419 es_AR es_BO es_BR es_BZ es_CL es_CO es_CR es_CU es_DO es_EA es_EC es_ES es_GQ es_GT es_HN es_IC es_MX es_NI es_PA es_PE es_PH es_PR es_PY es_SV es_US es_UY es_VE et et_EE eu eu_ES ewo fa fa_AF fa_IR ff ff_CM ff_GN ff_MR ff_SN fi fi_FI fil fil_PH fo fo_DK fo_FO fr fr_BE fr_BF fr_BI fr_BJ fr_BL fr_CA fr_CD fr_CF fr_CG fr_CH fr_CI fr_CM fr_DJ fr_DZ fr_FR fr_GA fr_GF fr_GN fr_GP fr_GQ fr_HT fr_KM fr_LU fr_MA fr_MC fr_MF fr_MG fr_ML fr_MQ fr_MR fr_MU fr_NC fr_NE fr_PF fr_PM fr_RE fr_RW fr_SC fr_SN fr_SY fr_TD fr_TG fr_TN fr_VU fr_WF fr_YT fur fur_IT fy fy_DE fy_NL ga ga_IE gd gd_GB gez gez_ER gez_ET gl gl_ES gom gom_Latn gsw gsw_CH gsw_FR gsw_LI gu gu_IN guz gv gv_GB ha ha_GH ha_NE ha_NG hak hak_TW haw he he_IL hi hi_IN hif hif_FJ hne hne_IN hr hr_BA hr_HR hsb hsb_DE ht ht_HT hu hu_HU hy hy_AM i18n ia ia_FR id id_ID ig ig_NG ii ik ik_CA in is is_IS it it_CH it_IT it_SM it_VA iu iu_CA iw ja ja_JP jgo jmc jv ka ka_GE kab kab_DZ kam kde kea khq ki kk kk_KZ kkj kl kl_GL kln km km_KH kn kn_IN ko ko_KP ko_KR kok kok_IN ks ks_IN ks_IN@devanagari ksb ksf ksh ku ku_TR kw kw_GB ky ky_KG lag lb lb_LU lg lg_UG li li_NL lij lij_IT lkt ln ln_AO ln_CD ln_CF ln_CG lo lo_LA lrc lrc_IQ lt lt_LT lu luo luy lv lv_LV lzh lzh_TW mag mag_IN mai mai_IN mas mas_TZ mer mfe mfe_MU mg mg_MG mgh mgo mhr mhr_RU mi mi_NZ miq miq_NI mjw mjw_IN mk mk_MK ml ml_IN mn mn_MN mni mni_IN mo mr mr_IN ms ms_BN ms_MY ms_SG mt mt_MT mua my my_MM mzn nan nan_TW nan_TW@latin naq nb nb_NO nb_SJ nd nds nds_DE nds_NL ne ne_IN ne_NP nhn nhn_MX niu niu_NU nl nl_AW nl_BE nl_BQ nl_CW nl_NL nl_SR nl_SX nmg nn nn_NO nnh no nr nr_ZA nso nso_ZA nus nyn oc oc_FR om om_ET om_KE or or_IN os os_RU pa pa_Arab pa_Guru pa_IN pa_PK pap pap_AW pap_CW pl pl_PL prg ps ps_AF pt pt_AO pt_BR pt_CH pt_CV pt_GQ pt_GW pt_LU pt_MO pt_MZ pt_PT pt_ST pt_TL qu qu_BO qu_EC quz quz_PE raj raj_IN rm rn ro ro_MD ro_RO rof ru ru_BY ru_KG ru_KZ ru_MD ru_RU ru_UA rw rw_RW rwk sa sa_IN sah sah_RU saq sat sat_IN sbp sc sc_IT sd sd_IN sd_IN@devanagari se se_FI se_NO se_SE seh ses sg sgs sgs_LT sh shi shi_Latn shi_Tfng shn shn_MM shs shs_CA si si_LK sid sid_ET sk sk_SK sl sl_SI sm sm_WS smn sn so so_DJ so_ET so_KE so_SO sq sq_AL sq_MK sq_XK sr sr_Cyrl sr_Cyrl_BA sr_Cyrl_ME sr_Cyrl_XK sr_Latn sr_Latn_BA sr_Latn_ME sr_Latn_XK sr_ME sr_RS sr_RS@latin ss ss_ZA st st_ZA sv sv_AX sv_FI sv_SE sw sw_CD sw_KE sw_TZ sw_UG szl szl_PL ta ta_IN ta_LK ta_MY ta_SG tcy tcy_IN te te_IN teo teo_KE tet tg tg_TJ th th_TH the the_NP ti ti_ER ti_ET tig tig_ER tk tk_TM tl tl_PH tlh tn tn_ZA to to_TO tpi tpi_PG tr tr_CY tr_TR ts ts_ZA tt tt_RU tt_RU@iqtelif twq tzl tzm tzm_Latn ug ug_CN uk uk_UA unm unm_US ur ur_IN ur_PK uz uz_Arab uz_Cyrl uz_Latn uz_UZ uz_UZ@cyrillic vai vai_Latn vai_Vaii ve ve_ZA vi vi_VN vo vun wa wa_BE wae wae_CH wal wal_ET wo wo_SN xh xh_ZA xog yav yi yi_US yo yo_BJ yo_NG yue yue_HK yue_Hans yue_Hant yuw yuw_PG zgh zh zh_CN zh_HK zh_Hans zh_Hans_HK zh_Hans_MO zh_Hans_SG zh_Hant zh_Hant_HK zh_Hant_MO zh_Hant_TW zh_MO zh_SG zh_TW zh_YUE zu zu_ZA","title":"List of available date function locales"},{"location":"webhookscript/date-locales.html#list-of-available-date-function-locales","text":"aa aa_DJ aa_ER aa_ER@saaho aa_ET af af_NA af_ZA agq agr agr_PE ak ak_GH am am_ET an an_ES anp anp_IN ar ar_AE ar_BH ar_DJ ar_DZ ar_EG ar_EH ar_ER ar_IL ar_IN ar_IQ ar_JO ar_KM ar_KW ar_LB ar_LY ar_MA ar_MR ar_OM ar_PS ar_QA ar_SA ar_SD ar_SO ar_SS ar_SY ar_Shakl ar_TD ar_TN ar_YE as as_IN asa ast ast_ES ayc ayc_PE az az_AZ az_Cyrl az_IR az_Latn bas be be_BY be_BY@latin bem bem_ZM ber ber_DZ ber_MA bez bg bg_BG bhb bhb_IN bho bho_IN bi bi_VU bm bn bn_BD bn_IN bo bo_CN bo_IN br br_FR brx brx_IN bs bs_BA bs_Cyrl bs_Latn byn byn_ER ca ca_AD ca_ES ca_ES_Valencia ca_FR ca_IT ccp ccp_IN ce ce_RU cgg chr chr_US cmn cmn_TW crh crh_UA cs cs_CZ csb csb_PL cu cv cv_RU cy cy_GB da da_DK da_GL dav de de_AT de_BE de_CH de_DE de_IT de_LI de_LU dje doi doi_IN dsb dsb_DE dua dv dv_MV dyo dz dz_BT ebu ee ee_TG el el_CY el_GR en en_001 en_150 en_AG en_AI en_AS en_AT en_AU en_BB en_BE en_BI en_BM en_BS en_BW en_BZ en_CA en_CC en_CH en_CK en_CM en_CX en_CY en_DE en_DG en_DK en_DM en_ER en_FI en_FJ en_FK en_FM en_GB en_GD en_GG en_GH en_GI en_GM en_GU en_GY en_HK en_IE en_IL en_IM en_IN en_IO en_ISO en_JE en_JM en_KE en_KI en_KN en_KY en_LC en_LR en_LS en_MG en_MH en_MO en_MP en_MS en_MT en_MU en_MW en_MY en_NA en_NF en_NG en_NL en_NR en_NU en_NZ en_PG en_PH en_PK en_PN en_PR en_PW en_RW en_SB en_SC en_SD en_SE en_SG en_SH en_SI en_SL en_SS en_SX en_SZ en_TC en_TK en_TO en_TT en_TV en_TZ en_UG en_UM en_US en_US_Posix en_VC en_VG en_VI en_VU en_WS en_ZA en_ZM en_ZW eo es es_419 es_AR es_BO es_BR es_BZ es_CL es_CO es_CR es_CU es_DO es_EA es_EC es_ES es_GQ es_GT es_HN es_IC es_MX es_NI es_PA es_PE es_PH es_PR es_PY es_SV es_US es_UY es_VE et et_EE eu eu_ES ewo fa fa_AF fa_IR ff ff_CM ff_GN ff_MR ff_SN fi fi_FI fil fil_PH fo fo_DK fo_FO fr fr_BE fr_BF fr_BI fr_BJ fr_BL fr_CA fr_CD fr_CF fr_CG fr_CH fr_CI fr_CM fr_DJ fr_DZ fr_FR fr_GA fr_GF fr_GN fr_GP fr_GQ fr_HT fr_KM fr_LU fr_MA fr_MC fr_MF fr_MG fr_ML fr_MQ fr_MR fr_MU fr_NC fr_NE fr_PF fr_PM fr_RE fr_RW fr_SC fr_SN fr_SY fr_TD fr_TG fr_TN fr_VU fr_WF fr_YT fur fur_IT fy fy_DE fy_NL ga ga_IE gd gd_GB gez gez_ER gez_ET gl gl_ES gom gom_Latn gsw gsw_CH gsw_FR gsw_LI gu gu_IN guz gv gv_GB ha ha_GH ha_NE ha_NG hak hak_TW haw he he_IL hi hi_IN hif hif_FJ hne hne_IN hr hr_BA hr_HR hsb hsb_DE ht ht_HT hu hu_HU hy hy_AM i18n ia ia_FR id id_ID ig ig_NG ii ik ik_CA in is is_IS it it_CH it_IT it_SM it_VA iu iu_CA iw ja ja_JP jgo jmc jv ka ka_GE kab kab_DZ kam kde kea khq ki kk kk_KZ kkj kl kl_GL kln km km_KH kn kn_IN ko ko_KP ko_KR kok kok_IN ks ks_IN ks_IN@devanagari ksb ksf ksh ku ku_TR kw kw_GB ky ky_KG lag lb lb_LU lg lg_UG li li_NL lij lij_IT lkt ln ln_AO ln_CD ln_CF ln_CG lo lo_LA lrc lrc_IQ lt lt_LT lu luo luy lv lv_LV lzh lzh_TW mag mag_IN mai mai_IN mas mas_TZ mer mfe mfe_MU mg mg_MG mgh mgo mhr mhr_RU mi mi_NZ miq miq_NI mjw mjw_IN mk mk_MK ml ml_IN mn mn_MN mni mni_IN mo mr mr_IN ms ms_BN ms_MY ms_SG mt mt_MT mua my my_MM mzn nan nan_TW nan_TW@latin naq nb nb_NO nb_SJ nd nds nds_DE nds_NL ne ne_IN ne_NP nhn nhn_MX niu niu_NU nl nl_AW nl_BE nl_BQ nl_CW nl_NL nl_SR nl_SX nmg nn nn_NO nnh no nr nr_ZA nso nso_ZA nus nyn oc oc_FR om om_ET om_KE or or_IN os os_RU pa pa_Arab pa_Guru pa_IN pa_PK pap pap_AW pap_CW pl pl_PL prg ps ps_AF pt pt_AO pt_BR pt_CH pt_CV pt_GQ pt_GW pt_LU pt_MO pt_MZ pt_PT pt_ST pt_TL qu qu_BO qu_EC quz quz_PE raj raj_IN rm rn ro ro_MD ro_RO rof ru ru_BY ru_KG ru_KZ ru_MD ru_RU ru_UA rw rw_RW rwk sa sa_IN sah sah_RU saq sat sat_IN sbp sc sc_IT sd sd_IN sd_IN@devanagari se se_FI se_NO se_SE seh ses sg sgs sgs_LT sh shi shi_Latn shi_Tfng shn shn_MM shs shs_CA si si_LK sid sid_ET sk sk_SK sl sl_SI sm sm_WS smn sn so so_DJ so_ET so_KE so_SO sq sq_AL sq_MK sq_XK sr sr_Cyrl sr_Cyrl_BA sr_Cyrl_ME sr_Cyrl_XK sr_Latn sr_Latn_BA sr_Latn_ME sr_Latn_XK sr_ME sr_RS sr_RS@latin ss ss_ZA st st_ZA sv sv_AX sv_FI sv_SE sw sw_CD sw_KE sw_TZ sw_UG szl szl_PL ta ta_IN ta_LK ta_MY ta_SG tcy tcy_IN te te_IN teo teo_KE tet tg tg_TJ th th_TH the the_NP ti ti_ER ti_ET tig tig_ER tk tk_TM tl tl_PH tlh tn tn_ZA to to_TO tpi tpi_PG tr tr_CY tr_TR ts ts_ZA tt tt_RU tt_RU@iqtelif twq tzl tzm tzm_Latn ug ug_CN uk uk_UA unm unm_US ur ur_IN ur_PK uz uz_Arab uz_Cyrl uz_Latn uz_UZ uz_UZ@cyrillic vai vai_Latn vai_Vaii ve ve_ZA vi vi_VN vo vun wa wa_BE wae wae_CH wal wal_ET wo wo_SN xh xh_ZA xog yav yi yi_US yo yo_BJ yo_NG yue yue_HK yue_Hans yue_Hant yuw yuw_PG zgh zh zh_CN zh_HK zh_Hans zh_Hans_HK zh_Hans_MO zh_Hans_SG zh_Hant zh_Hant_HK zh_Hant_MO zh_Hant_TW zh_MO zh_SG zh_TW zh_YUE zu zu_ZA","title":"List of available date function locales"},{"location":"webhookscript/examples.html","text":"WebhookScript Examples Info Do you have a nice example to share with other users? Or looking for even more examples? Take a look at the WebhookScript example repository, and make a pull request if you want to contribute: https://github.com/fredsted/webhookscripts Validate request In this example, we use a common method of verifying webhooks by taking a hash of its contents concatenated to a secret. It demonstrates the way WebhookScript can get various information about the request by using the get_variable() function, as well as string concatenation, hashing, if statements and returning responses with content, status codes and headers using respond() , which halts execution. verification_secret = \"JHRlc3RTY3JpcHRTZWNyZXQ\" ; verification_challenge = var ( \"request.header.x-request-verification\" ); verification_result = hash_sha256 ( var ( 'request.content' ) + verification_secret ); if ( ! verification_challenge or verification_challenge != verification_result ) { respond ( \"Invalid request\" , 500 ); } headers = [ \"X-Success: Yes\" , \"X-Verification: \" + verification_challenge ]; respond ( \"Successful request\" , 200 , headers ); Send a x-www-form-urlencoded request content = query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) headers = [ 'Content-Type: application/x-www-form-urlencoded' ]; response = request ( 'https://example.com' , content , 'POST' , headers ); Transform and resend In the following, an incoming request is JSON decoded to an array, transformed and sent to \"Web Service 1\". Then the output is saved and passed on to \"Web Service 2\" in XML format. Basic error handling and validation is demonstrated. // Configuration, fetched from the users' Global Variables ws1_api_key = var ( 'WS1_KEY' ) ws2_user_token = var ( 'WS1_USER_TOKEN' ) // Function for error handling function error ( message ) { echo ( 'Error: {}' . format ( message )) respond ( json_encode ([ 'error' : message ]), 500 ) } // Parse original request orig_req = json_decode ( var ( 'request.content' )) // If the JSON was invalid if ( ! orig_req ) { error ( 'Invalid request' ) } // Send request to Web Service 1, using format() for string placeholders ws1_url = 'https://ws1.example.com/3.0/lists/{}/interest-categories/{}/interests' . format ( list_id , group_id ) ws1_content = [ 'first_name' : orig_req [ 'firstName' ], 'last_name' : orig_req [ 'lastName' ] ] ws1_response = request ( ws1_url , json_encode ( ws1_content ), 'POST' , [ 'Authorization: Basic ' + ws1_api_key ] ) // Don't go further if the Web Service 1 step didn't succeed if ( ws1_response [ 'status' ] != 200 ) { echo ( ws1_response [ 'content' ]); // Log content to output error ( 'Invalid response from WS1' ) } // Get a value from the Web Service 1 request ws1_response_id = json_decode ( ws1_response )[ 'id' ] // Pass response on to Web Service 2 in XML format, using a multi-line string and format() ws2_content = ' <qdbapi> <usertoken>{}</usertoken> <listid>{}</listid> <field fid=\"7\">{}</field> </qdbapi>' . format ( ws2_user_token , orig_req [ 'listId' ], ws1_group_id ) ws2_response = request ( 'https://ws2.example.com/db/zzzzzz' , ws2_content , 'POST' , [ \"Action: API_EditRecord\" , \"Content-Type: application/xml\" ] ) if ( ws2_response [ 'status' ] != 200 ) { echo ( ws2_response [ 'content' ]); // Log content to debug log error ( 'Invalid response from WS2' ) } // Output the WS2 response content to debug output echo ( ws2_response [ 'content' ]) respond ( 'OK' , 200 ) Telegram bot The Messaging service Telegram allows bots using their API. The general principle is this: Create a Bot using the /newbot command sent to the BotFather Telegram User Using the bot token sent from BotFather , use the Telegram API to create a Webhook subscription (using your Webhook.site URL) Add some logic using WebhookScript! Note: Everywhere you see TELEGRAM_TOKEN , replace it with the token you got from BotFather! Subscribe to Webhook To create the Webhook subscription, change the token and the Webhook.site URL to your own and go to the following URL in your browser: https://api.telegram.org/bot TELEGRAM_TOKEN /setWebhook?url= https://webhook.site/a1351781 You should get a response similar to this: { \"ok\" : true , \"result\" : true , \"description\" : \"Webhook was set\" } First incoming Webhook When you add your bot to your Telegram contacts list, Telegram automatically sends a /start command to the bot, which triggers a Webhook similar to this: { \"update_id\" : 176446573 , \"message\" : { \"message_id\" : 1 , \"from\" : { \"id\" : 2346545645 , \"is_bot\" : false , \"first_name\" : \"Simon\" , \"language_code\" : \"en\" }, \"chat\" : { \"id\" : 34534673234 , \"first_name\" : \"Simon\" , \"type\" : \"private\" }, \"date\" : 1581706369 , \"text\" : \"/start\" , \"entities\" : [ { \"offset\" : 0 , \"length\" : 6 , \"type\" : \"bot_command\" } ] } } You should be able to see this in the Webhook.site requests list. From this, we have all the parts needed to build a script that answers to commands: // Telegram API token token = 'TELEGRAM_TOKEN' ; content = json_decode ( var ( '$request.content$' )); msg = content [ 'message' ][ 'text' ]; response = \"Couldn't come up with anything witty.\" ; if ( msg == \"How's it going?\" ) { response = 'Pretty good.' } if ( msg == \"How's the weather?\" ) { response = 'Raining.' } if ( msg == r \"You're (.*)\" ) { match = regex_extract_first ( r \"You're (.*)\" , msg ) response = 'No, YOU are {}' . format ( match ); } if ( msg == \"/start\" ) { response = \"Hi! I'm WebhookBot.\" } url = 'https://api.telegram.org/bot{}/sendMessage' . format ( token ) json = [ 'chat_id' : content [ 'message' ][ 'chat' ][ 'id' ], 'text' : response ]; request ( url , json_encode ( json ), 'POST' ); Things to note: The API token is added to the script, but could also have been saved in Global Variables in Control Panel and fetched out with the var() function. The third if-statement uses regex matching to provide a dynamic response. Someone typing \"You're a bot\" would receive \"No, YOU are a bot\" Finally, we JSON encode a WebhookScript array and send it using the request() function. Simply copy this script into a WebhookScript Custom Action (remember to change the token!), and click Save Action. Then, you can interact with the bot using the Telegram app: And that's it! Congratulations on your bot. It's not very smart, but from here, the possibilities are endless! Building HTML content The following script builds a piece of HTML content using the string_format function, based on previously defined variables, and shows how to use a function to return different content based on input. After this, it sends a JSON request (by converting an array to JSON via the json_encode function) containing the HTML using basic Bearer authentication. function alert_class () { if ( status == 'Operational' ) { return 'success' ; } if ( status == 'Degraded Performance' ) { return 'warning' ; } if ( string_contains ( status , 'Disruption' )) { return 'danger' ; } } template = ' <div class=\"alert alert-{}\"> <h2 class=\"alert-title\">{} - {}</h2> <p> {}<br /> State: {}<br /> Component affected: {} </p> <p>{}</p> </div>' ; postbody = string_format ( template , alert_class (), message , state , component , to_date ( 'now' ). date_format ( 'LLLL' ) ) json = [ 'alert' : [ 'title' : '{} - {}' . format ( component , state ), 'body' : postbody , 'draft' : false , 'types' : [ 'alert' ] ], ] request ( 'http://example.com/alerts' , json_encode ( json ), 'POST' , [ 'Content-Type: application/json' , 'Authorization: Basic {}' . format ( token ) ] ) Uploading and parsing CSV file With this script, a file upload form is displayed when visiting the URL. After submitting the form, the CSV file is processed and validated (in this example, there must be more than 2 rows). If it can't be validated, an error message is shown. Finally, the user is shown an \"Upload successful\" message if the CSV file is valid. url = var ( 'request.url' ) set_header ( 'content-type' , 'text/html' ); // Display file upload form and exit if HTTP method is not POST if ( var ( 'request.method' ) != 'POST' ) { respond ( ' <html> <head><title>Upload CSV</title></head> <body> <h1>Upload CSV</h1> <form action=\"{}\" method=\"POST\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"/> <button type=\"submit\">Upload</button> </form> </body> </html> ' . format ( url )) } // Use a comma as delimiter and treat first row (0) as header row array = csv_to_array ( var ( 'request.file.file.content' ), ',' , 0 ) // If CSV can't be parsed, or there's less than 2 rows, fail if ( ! array or array . length () < 2 ) { respond ( ' <h1>Could not parse CSV</h1> <a href=\"{}\">Upload again</a> ' . format ( url )); } // Display the parsed CSV in JSON format respond ( ' <h1>Upload successful</h1> <pre>{}</pre> <p> <a href=\"{}\">Upload again</a> </p> ' . format ( json_encode ( array ), url ))","title":"Examples"},{"location":"webhookscript/examples.html#webhookscript-examples","text":"Info Do you have a nice example to share with other users? Or looking for even more examples? Take a look at the WebhookScript example repository, and make a pull request if you want to contribute: https://github.com/fredsted/webhookscripts","title":"WebhookScript Examples"},{"location":"webhookscript/examples.html#validate-request","text":"In this example, we use a common method of verifying webhooks by taking a hash of its contents concatenated to a secret. It demonstrates the way WebhookScript can get various information about the request by using the get_variable() function, as well as string concatenation, hashing, if statements and returning responses with content, status codes and headers using respond() , which halts execution. verification_secret = \"JHRlc3RTY3JpcHRTZWNyZXQ\" ; verification_challenge = var ( \"request.header.x-request-verification\" ); verification_result = hash_sha256 ( var ( 'request.content' ) + verification_secret ); if ( ! verification_challenge or verification_challenge != verification_result ) { respond ( \"Invalid request\" , 500 ); } headers = [ \"X-Success: Yes\" , \"X-Verification: \" + verification_challenge ]; respond ( \"Successful request\" , 200 , headers );","title":"Validate request"},{"location":"webhookscript/examples.html#send-a-x-www-form-urlencoded-request","text":"content = query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) headers = [ 'Content-Type: application/x-www-form-urlencoded' ]; response = request ( 'https://example.com' , content , 'POST' , headers );","title":"Send a x-www-form-urlencoded request"},{"location":"webhookscript/examples.html#transform-and-resend","text":"In the following, an incoming request is JSON decoded to an array, transformed and sent to \"Web Service 1\". Then the output is saved and passed on to \"Web Service 2\" in XML format. Basic error handling and validation is demonstrated. // Configuration, fetched from the users' Global Variables ws1_api_key = var ( 'WS1_KEY' ) ws2_user_token = var ( 'WS1_USER_TOKEN' ) // Function for error handling function error ( message ) { echo ( 'Error: {}' . format ( message )) respond ( json_encode ([ 'error' : message ]), 500 ) } // Parse original request orig_req = json_decode ( var ( 'request.content' )) // If the JSON was invalid if ( ! orig_req ) { error ( 'Invalid request' ) } // Send request to Web Service 1, using format() for string placeholders ws1_url = 'https://ws1.example.com/3.0/lists/{}/interest-categories/{}/interests' . format ( list_id , group_id ) ws1_content = [ 'first_name' : orig_req [ 'firstName' ], 'last_name' : orig_req [ 'lastName' ] ] ws1_response = request ( ws1_url , json_encode ( ws1_content ), 'POST' , [ 'Authorization: Basic ' + ws1_api_key ] ) // Don't go further if the Web Service 1 step didn't succeed if ( ws1_response [ 'status' ] != 200 ) { echo ( ws1_response [ 'content' ]); // Log content to output error ( 'Invalid response from WS1' ) } // Get a value from the Web Service 1 request ws1_response_id = json_decode ( ws1_response )[ 'id' ] // Pass response on to Web Service 2 in XML format, using a multi-line string and format() ws2_content = ' <qdbapi> <usertoken>{}</usertoken> <listid>{}</listid> <field fid=\"7\">{}</field> </qdbapi>' . format ( ws2_user_token , orig_req [ 'listId' ], ws1_group_id ) ws2_response = request ( 'https://ws2.example.com/db/zzzzzz' , ws2_content , 'POST' , [ \"Action: API_EditRecord\" , \"Content-Type: application/xml\" ] ) if ( ws2_response [ 'status' ] != 200 ) { echo ( ws2_response [ 'content' ]); // Log content to debug log error ( 'Invalid response from WS2' ) } // Output the WS2 response content to debug output echo ( ws2_response [ 'content' ]) respond ( 'OK' , 200 )","title":"Transform and resend"},{"location":"webhookscript/examples.html#telegram-bot","text":"The Messaging service Telegram allows bots using their API. The general principle is this: Create a Bot using the /newbot command sent to the BotFather Telegram User Using the bot token sent from BotFather , use the Telegram API to create a Webhook subscription (using your Webhook.site URL) Add some logic using WebhookScript! Note: Everywhere you see TELEGRAM_TOKEN , replace it with the token you got from BotFather!","title":"Telegram bot"},{"location":"webhookscript/examples.html#subscribe-to-webhook","text":"To create the Webhook subscription, change the token and the Webhook.site URL to your own and go to the following URL in your browser: https://api.telegram.org/bot TELEGRAM_TOKEN /setWebhook?url= https://webhook.site/a1351781 You should get a response similar to this: { \"ok\" : true , \"result\" : true , \"description\" : \"Webhook was set\" }","title":"Subscribe to Webhook"},{"location":"webhookscript/examples.html#first-incoming-webhook","text":"When you add your bot to your Telegram contacts list, Telegram automatically sends a /start command to the bot, which triggers a Webhook similar to this: { \"update_id\" : 176446573 , \"message\" : { \"message_id\" : 1 , \"from\" : { \"id\" : 2346545645 , \"is_bot\" : false , \"first_name\" : \"Simon\" , \"language_code\" : \"en\" }, \"chat\" : { \"id\" : 34534673234 , \"first_name\" : \"Simon\" , \"type\" : \"private\" }, \"date\" : 1581706369 , \"text\" : \"/start\" , \"entities\" : [ { \"offset\" : 0 , \"length\" : 6 , \"type\" : \"bot_command\" } ] } } You should be able to see this in the Webhook.site requests list. From this, we have all the parts needed to build a script that answers to commands: // Telegram API token token = 'TELEGRAM_TOKEN' ; content = json_decode ( var ( '$request.content$' )); msg = content [ 'message' ][ 'text' ]; response = \"Couldn't come up with anything witty.\" ; if ( msg == \"How's it going?\" ) { response = 'Pretty good.' } if ( msg == \"How's the weather?\" ) { response = 'Raining.' } if ( msg == r \"You're (.*)\" ) { match = regex_extract_first ( r \"You're (.*)\" , msg ) response = 'No, YOU are {}' . format ( match ); } if ( msg == \"/start\" ) { response = \"Hi! I'm WebhookBot.\" } url = 'https://api.telegram.org/bot{}/sendMessage' . format ( token ) json = [ 'chat_id' : content [ 'message' ][ 'chat' ][ 'id' ], 'text' : response ]; request ( url , json_encode ( json ), 'POST' ); Things to note: The API token is added to the script, but could also have been saved in Global Variables in Control Panel and fetched out with the var() function. The third if-statement uses regex matching to provide a dynamic response. Someone typing \"You're a bot\" would receive \"No, YOU are a bot\" Finally, we JSON encode a WebhookScript array and send it using the request() function. Simply copy this script into a WebhookScript Custom Action (remember to change the token!), and click Save Action. Then, you can interact with the bot using the Telegram app: And that's it! Congratulations on your bot. It's not very smart, but from here, the possibilities are endless!","title":"First incoming Webhook"},{"location":"webhookscript/examples.html#building-html-content","text":"The following script builds a piece of HTML content using the string_format function, based on previously defined variables, and shows how to use a function to return different content based on input. After this, it sends a JSON request (by converting an array to JSON via the json_encode function) containing the HTML using basic Bearer authentication. function alert_class () { if ( status == 'Operational' ) { return 'success' ; } if ( status == 'Degraded Performance' ) { return 'warning' ; } if ( string_contains ( status , 'Disruption' )) { return 'danger' ; } } template = ' <div class=\"alert alert-{}\"> <h2 class=\"alert-title\">{} - {}</h2> <p> {}<br /> State: {}<br /> Component affected: {} </p> <p>{}</p> </div>' ; postbody = string_format ( template , alert_class (), message , state , component , to_date ( 'now' ). date_format ( 'LLLL' ) ) json = [ 'alert' : [ 'title' : '{} - {}' . format ( component , state ), 'body' : postbody , 'draft' : false , 'types' : [ 'alert' ] ], ] request ( 'http://example.com/alerts' , json_encode ( json ), 'POST' , [ 'Content-Type: application/json' , 'Authorization: Basic {}' . format ( token ) ] )","title":"Building HTML content"},{"location":"webhookscript/examples.html#uploading-and-parsing-csv-file","text":"With this script, a file upload form is displayed when visiting the URL. After submitting the form, the CSV file is processed and validated (in this example, there must be more than 2 rows). If it can't be validated, an error message is shown. Finally, the user is shown an \"Upload successful\" message if the CSV file is valid. url = var ( 'request.url' ) set_header ( 'content-type' , 'text/html' ); // Display file upload form and exit if HTTP method is not POST if ( var ( 'request.method' ) != 'POST' ) { respond ( ' <html> <head><title>Upload CSV</title></head> <body> <h1>Upload CSV</h1> <form action=\"{}\" method=\"POST\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"/> <button type=\"submit\">Upload</button> </form> </body> </html> ' . format ( url )) } // Use a comma as delimiter and treat first row (0) as header row array = csv_to_array ( var ( 'request.file.file.content' ), ',' , 0 ) // If CSV can't be parsed, or there's less than 2 rows, fail if ( ! array or array . length () < 2 ) { respond ( ' <h1>Could not parse CSV</h1> <a href=\"{}\">Upload again</a> ' . format ( url )); } // Display the parsed CSV in JSON format respond ( ' <h1>Upload successful</h1> <pre>{}</pre> <p> <a href=\"{}\">Upload again</a> </p> ' . format ( json_encode ( array ), url ))","title":"Uploading and parsing CSV file"},{"location":"webhookscript/functions.html","text":"Global Functions About Functions These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL. Chaining Functions can be chained directly to a primitive (strings, numbers, arrays). These two statements are equivalent: 'Hello World' . echo () echo ( 'Hello World' ) They can even be chained, for example: 'Hello World' . hash ( 'md5' ). echo () Furthermore, functions that begin in a type can be referenced without it, for example, when calling the format function with the first argument being a string, the language infers that actually the string_format function should be used. echo ( string_format ( 'hello %s' , 'world' )) // hello world 'hello %s' . format ( 'world' ). echo () // hello world Read more about functions in the reference . Custom functions Define your own functions like this: function sub ( a , b ) { return a - b ; } Read more about functions in the reference . Debugging and output echo( string string) Adds string to script debug output. dd( any value) Stops Custom Action execution and adds value to script debug output. dump( any value) Adds value as a decoded string to script debug output. Custom Action Variables These functions lets you interface with other Custom Actions by getting and setting variables from them. These functions are also how you retrieve Global Variables defined in the Control Panel. var( string variable_name) : mixed Retrieves the value of a Variable or Global Variable (defined in the Control Panel). The surrounding dollar signs are not mandatory. Returns null if the variable does not exist. var ( 'request.header.x-request-verification' ) // returns value of the `x-request-verification` header set( string variable_name, string variable_value) Sets a Variable for usage in current action execution. The Variable is available to downstream actions, but not stored permanently. store( string global_variable_name, any value): any Permanently creates or updates a Global Variable (as defined in Control Panel.) The value can be retrieved with the var() function in subsequent action executions. variables : array A variable (not a function) containing an associative array with all available Webhook.site variables. user_agent = variables [ 'request.header.user-agent' ] HTTP query( array form_values) : string Converts an associative array into a form-style string, used for e.g. application/x-www-form-urlencoded requests or HTTP query strings. query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) // country=Cura%C3%A7ao&population=158665 request( string url, string content = '', string method = 'GET', array headers = []) : array Sends a HTTP request and returns an array with the following keys containing response data: content status headers url The headers should be an array of strings in the form of ['Header-Key-1: Foo', 'Header-Key-2: Bar'] . To get a JSON document, validate if valid JSON, and get a property: response = request ( 'https://example.com' ) decoded = json_decode ( response [ 'content' ]) if ( decoded ) { value = decoded [ 'value' ] } url_decode( string value) : string Returns an URL-decoded version of value . url_encode( string value) : string Returns an URL-encoded version of value . url_encode ( 'here\\'s a value' ) // here%27s+a+value Flow Control and Responses delay( int seconds, string code) Executes code in the future. Any output will be stored on the request and will show with a \"Was delayed\" label. The code will not inherit the execution scope. In this example, the format function is used to prepare the code string with a URL, causing {} to be replaced with with https://example.com . code = ' request( \"{}\", \\'{\"message\": \"Hello World!\"}\\', \"POST\" ) ' url = 'https://example.com' delay ( 5 , code . format ( url )); The maximum amount of seconds allowed is 604800 (7 days). exec( string code) : any Executes code in code and returns the result. The code will inherit the execution scope. import( string url) : any Downloads code located at url and returns the result. The code will inherit the execution scope. As an example, this can be used if you want to re-use code. Just upload it to a server or e.g. Github and use it in different WebhookScript actions. result = import ( 'https://raw.githubusercontent.com/fredsted/webhookscripts/ec22946a83ea85f607fcc6bff83f9d81ed2fe4ed/hello_world.ws' ) echo ( result ) // value respond( string content, int status, array headers) Stops Custom Action execution and returns a response. stop() Stops Custom Action execution. set_content( string content) Sets or overwrites the response content of the URL. Script execution continues. set_header( string header_name, string header_value) Sets or overwrites a response header of the URL. Script execution continues. set_response( string content, int status, array headers) Sets or overwrites response content, status and headers in single function. Script execution continues. headers should be an array of strings e.g. [\"X-Example: Value\", \"X-Foo: Bar\"] . set_status( number status) Sets or overwrites the HTTP response status of the current URL. Script execution continues. String base64_decode( string string) : string Returns a base64-encoded string. base64_encode( string string) : string Returns decoded base64 string. csv_to_array( string csvString, string delimiter, int headerOffset, string enclosure, string escape) : array Takes a CSV string and outputs to an array, with each row being an item in the array. Optionally, if headerOffset is delimiter will explicitly set the CSV delimiter the parser will attempt to use (e.g. ; ). Must be a single character. Defaults to , (comma.) headerOffset , when specified, causes the output array item's keys to be set to the header values. Setting to 0 will mark the first row as the header row. enclosure sets the field enclosure character. Must be a single character. Defaults to \" (double quote.) escape sets the field escape character. Must be a single character. Defaults to \\ (backslash.) csv_content = 'firstname,lastname,title \"M. J.\",Plumley,\"Sr. Developer\" Emily,\"Jenna Platt\",\"Chief Information Officer\"' array = csv_to_array ( csv_content , ',' , 0 ) echo ( json_encode ( array )) // [ // { // \"firstname\": \"John\", // \"lastname\": \"Doe\", // \"title\": \"Sr. Developer\" // }, // { // \"firstname\": \"Emily\", // \"lastname\": \"Jenna Platt\", // \"title\": \"Chief Information Officer\" // } // ] hash( string/number value, string algo) : string Returns a hashed version of value using the algo algorithm. hash('md5', 'hello world') // 5eb63bbbe01eeed093cb22bb8f5acdc3 The following built-in algorithms are available: md2 , md4 , md5 , sha1 , sha224 , sha256 , sha384 , sha512/224 , sha512/256 , sha512 , sha3-224 , sha3-256 , sha3-384 , sha3-512 , ripemd128 , ripemd160 , ripemd256 , ripemd320 , whirlpool , tiger128,3 , tiger160,3 , tiger192,3 , tiger128,4 , tiger160,4 , tiger192,4 , snefru , snefru256 , gost , gost-crypto , adler32 , crc32 , crc32b , fnv132 , fnv1a32 , fnv164 , fnv1a64 , joaat , haval128,3 , haval160,3 , haval192,3 , haval224,3 , haval256,3 , haval128,4 , haval160,4 , haval192,4 , haval224,4 , haval256,4 , haval128,5 , haval160,5 , haval192,5 , haval224,5 , haval256,5 . json_decode( string json) : array Decodes json and returns an array json_encode( array array) : string Takes an array and encodes it as a JSON string json_path( string json, string jsonpath, bool return_first = true) : string Returns the result of a json string parsed using the JSONPath functionality. Per default, if there's just one match (e.g. if matching on a property value that's a string), this value is returned. To always return an array, set return_first to false. dump ( json_path ( '{\"v\": []}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": []}' , 'v[*]' )) // [] // \"\" dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' )) // [0: \"item1\"] // \"item1\" dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' )) // [0: \"item1\", 1: \"item2\"] // [0: \"item1\", 1: \"item2\"] regex_extract( regex regex, string subject) : array/false Returns the matching string and all match groups as an array, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (\\w) (.*)\" , input ) dump ( output ) // [0: \"You're a good bot\", 1: \"a\", 2: \"good bot\"] regex_extract_first( regex regex, string subject) : string/false Returns the first match group of a regex, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (.*)\" , input ) dump ( output ) // \"a good bot\" regex_match( regex regex, string subject) : string/false Returns the first matching string, otherwise false. input = \"You're a good bot\" output = regex_match ( r \"You're .*\" , input ) dump ( output ) // \"You're a good bot\" regex_to_string( regex regex) : string Returns the regex converted to a string string_contains( string subject, number/string/regex value) : bool Returns boolean if subject contains value string_find_first( string subject, number/string value) : number Returns position of value in subject , or false if not found string_find_last( string subject, number/string value) : number Returns position of value in subject , or false if not found string_format( string formatString, ... any items) : string Sprintf-like formatting of formatString with items , see PHP sprintf docs. string_join( string subject, array items (number/string/bool/array)) : string Joins items with string subject string_length( string string) : number Returns length of string (multibyte-aware) string_number_of( string string) : number Returns number value of string string_replace( string subject, string search, string replace) : string Replaces string search with replace found in subject . string_reverse( string subject) : string Reverses string subject string_shuffle( string string) : string Returns string where the individual characters has been shuffled. string_split( string subject, string/regex delimiter) : array Returns array of split string subject with delimiter to_regex( string regex) : regex Converts a regex string to a regex type to_string( string/number/bool value) : string Returns value as string xpath( string xpath, string input): string/null Returns the first result of an XPath query on XML document input . Given a request with the following content: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> xpath(var('$request.content$'), '//employee[1]') // returns \"Jack\" var('$request.content$').xpath('//employee[1]') // returns \"Jack\" More information and examples regarding XPath . xpath_all( string xpath, string input): string/null Returns the results of an XPath query on XML document input as an array. Given a request with the following content: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> xpath_all(var('$request.content$'), '//employee]') // returns [0: \"Jack\", 1: \"Ann\"] var('$request.content$').xpath('//employee') // returns [0: \"Jack\", 1: \"Ann\"] More information and examples regarding XPath . Date Manipulation In WebhookScript, dates are not a specific type, and ar expressed in strings instead, which WebhookScript will attempt to parse. If possible, we recommend using a specific date format like ISO-8601 which leaves little doubt for misunderstanding. Date format characters WebhookScript uses the ISO format for converting and formatting dates, and the format is compatible with the Moment.js format method . The following examples are based on the date 2017-01-05 17:04:05.084512 . Code Example Description OD 5 Day number with alternative numbers such as \u4e09 for 3 if locale is ja_JP OM 1 Month number with alternative numbers such as \u1040\u1042 for 2 if locale is my_MM OY 2017 Year number with alternative numbers such as \u06f1\u06f9\u06f9\u06f8 for 1998 if locale is fa OH 17 24-hours number with alternative numbers such as \u1091\u1093 for 13 if locale is shn_MM Oh 5 12-hours number with alternative numbers such as \u5341\u4e00 for 11 if locale is lzh_TW Om 4 Minute number with alternative numbers such as \u0b6b\u0b6d for 57 if locale is or Os 5 Second number with alternative numbers such as \u5341\u4e94 for 15 if locale is ja_JP D 5 Day of month number (from 1 to 31) DD 05 Day of month number with trailing zero (from 01 to 31) Do 5th Day of month with ordinal suffix (from 1st to 31th), translatable d 4 Day of week number (from 0 (Sunday) to 6 (Saturday)) dd Th Minified day name (from Su to Sa), transatable ddd Thu Short day name (from Sun to Sat), transatable dddd Thursday Day name (from Sunday to Saturday), transatable DDD 5 Day of year number (from 1 to 366) DDDD 005 Day of year number with trailing zeros (3 digits, from 001 to 366) DDDo 5th Day of year number with ordinal suffix (from 1st to 366th), translatable e 4 Day of week number (from 0 (Sunday) to 6 (Saturday)), similar to \"d\" but this one is translatable (takes first day of week of the current locale) E 4 Day of week number (from 1 (Monday) to 7 (Sunday)) H 17 Hour from 0 to 23 HH 17 Hour with trailing zero from 00 to 23 h 5 Hour from 0 to 12 hh 05 Hour with trailing zero from 00 to 12 k 17 Hour from 1 to 24 kk 17 Hour with trailing zero from 01 to 24 m 4 Minute from 0 to 59 mm 04 Minute with trailing zero from 00 to 59 a pm Meridiem am/pm A PM Meridiem AM/PM s 5 Second from 0 to 59 ss 05 Second with trailing zero from 00 to 59 S 0 Second tenth SS 08 Second hundredth (on 2 digits with trailing zero) SSS 084 Millisecond (on 3 digits with trailing zeros) SSSS 0845 Second ten thousandth (on 4 digits with trailing zeros) SSSSS 08451 Second hundred thousandth (on 5 digits with trailing zeros) SSSSSS 084512 Microsecond (on 6 digits with trailing zeros) SSSSSSS 0845120 Second ten millionth (on 7 digits with trailing zeros) SSSSSSSS 08451200 Second hundred millionth (on 8 digits with trailing zeros) SSSSSSSSS 084512000 Nanosecond (on 9 digits with trailing zeros) M 1 Month from 1 to 12 MM 01 Month with trailing zero from 01 to 12 MMM Jan Short month name, translatable MMMM January Month name, translatable Mo 1st Month with ordinal suffix from 1st to 12th, translatable Q 1 Quarter from 1 to 4 Qo 1st Quarter with ordinal suffix from 1st to 4th, translatable G 2017 ISO week year (see ISO week date) GG 2017 ISO week year (on 2 digits with trailing zero) GGG 2017 ISO week year (on 3 digits with trailing zeros) GGGG 2017 ISO week year (on 4 digits with trailing zeros) GGGGG 02017 ISO week year (on 5 digits with trailing zeros) g 2017 Week year according to locale settings, translatable gg 2017 Week year according to locale settings (on 2 digits with trailing zero), translatable ggg 2017 Week year according to locale settings (on 3 digits with trailing zeros), translatable gggg 2017 Week year according to locale settings (on 4 digits with trailing zeros), translatable ggggg 02017 Week year according to locale settings (on 5 digits with trailing zeros), translatable W 1 ISO week number in the year (see ISO week date) WW 01 ISO week number in the year (on 2 digits with trailing zero) Wo 1st ISO week number in the year with ordinal suffix, translatable w 1 Week number in the year according to locale settings, translatable ww 01 Week number in the year according to locale settings (on 2 digits with trailing zero) wo 1st Week number in the year according to locale settings with ordinal suffix, translatable x 1483635845085 Millisecond-precision timestamp (same as date.getTime() in JavaScript) X 1483635845 Timestamp (number of seconds since 1970-01-01) Y 2017 Full year from -9999 to 9999 YY 17 Year on 2 digits from 00 to 99 YYYY 2017 Year on 4 digits from 0000 to 9999 YYYYY 02017 Year on 5 digits from 00000 to 09999 YYYYYY +002017 Year on 5 digits with sign from -09999 to +09999 z UTC Abbreviated time zone name zz UTC Time zone name Z +00:00 Time zone offset HH:mm ZZ +0000 Time zone offset HHmm Source: Carbon Docs Date locales available Click here for a list of possible locales/translations available for date display functions. to_date( string date, ?string format): string Will attempt to parse a string to a ISO-8601 formatted date string. If specified, format is used to parse the date without having to guess the format (see the Date Format Characters above.) Many formats are supported, like relative dates and various specified date formats. If the date is invalid or could not be guessed, null is returned. // Relative formats 'last wednesday 4 am' . to_date () // 2020-05-27T04:00:00.000000Z 'first monday august 2019' . to_date () // 2019-08-05T00:00:00.000000Z // Automatic format guessing '2020-01-01 23:02:01' . to_date () // 2020-01-01T23:02:01.000000Z // Unix timestamp '@1215282385' . to_date () // 2008-07-05T18:26:25.000000Z // Custom date format '2/4/12 06:03' . to_date ( 'M/D/YY HH:mm' ) // 2012-02-04T06:03:00.000000Z // To escape characters in the format string, backslashes can be used '2020-01-05 12h30m15s' . to_date ( 'YYYY-MM-DD HH\\\\hmm\\\\mss\\\\s' ) // 2020-01-05T12:30:15.000000Z date_format( string date, ?string format, ?string locale): string Returns a date parsed to the format specified in format . date_format ( '2008-07-05T18:26:25.000000Z' , 'YYYY-MM-DD' ) // 2008-07-05 date_format ( '2008-07-05T18:26:25.000000Z' , 'LLLL' , 'da' ) // l\u00f8rdag d. 5. juli 2008 kl. 18:26 // If no format is specified, a default human readable readable string is returned date_format ( '2008-07-05T18:26:25.000000Z' ) // Sat Jul 05 2008 18:26:25 GMT+0000 date_to_array( string ): array Returns an array containing all the components of a given date. dump ( date_to_array ( '2008-07-05T18:26:25.324542Z' )) // [ // \"year\": 2008, // \"month\": 7, // \"day\": 5, // \"dayOfWeek\": 6, // \"dayOfYear\": 187, // \"hour\": 18, // \"minute\": 26, // \"second\": 25, // \"micro\": 324542, // \"timestamp\": 1215282385, // \"formatted\": \"2008-07-05 18:26:25\", // \"timezone\": \"Z\" // ] date_interval( string date1, string date2, ?string format): string/int Calculates the interval between date1 and date2 . If no format string is specified, the interval is returned as the number of seconds between the dates, with the number being negative if date2 is before date1 . Note that for the format string, this function does not use the ISO format, but rather the uses the PHP DateInterval format specification . date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -967620 date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , '%d days, %h hours, %i minutes' ) // 11 days, 4 hours, 47 minutes date_interval_human( string date1, string date2, ?string locale): string/int Formats the difference between 2 dates in a way that's easy to read for humans. If no locale is specified, English is used. date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // 1 week after date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , 'es' ) // 1 semana despu\u00e9s Math and Numbers abs( number number) : number atan( number number) : number ceil( number number) : number cos( number number) : number floor( number number) : number max( array numbers) : number min( array numbers) : number mod( number number, number divisor) : number Returns the remainder after number is divided by divisor . number_length( number number) : number pi() : number Returns the value of Pi. pow( number number, number power) : number rand( number min, number max) : number Returns a random number between min and max . round( number number, number precision) : number sin( number number) : number sqrt( number number) : number tan( number number) : number to_number( any value) : number Arrays array_contains( array array, string/number needle) : bool Returns true or false depending on whether array contains needle array_copy( array array) : array Returns a copy of array array_diff( array array1, array array2) : array Returns the items of array1 that are not present in array2 while keeping the array indices. array_get( array array, string/number index, any default) : any array_has( array array, string/number key) : bool array_length( array array) : number` array_map( array array, func function) Runs function with each array value, and returns array with key as result array_number_of( array , string/number value) : number Returns amount of value array_pop( array array) : any Pop element off end of array array_push( array array, any value) : any Adds value to end of array and returns value array_random( array array) : any Returns random value of array array_reverse( array array) : array Returns array in reverse order array_shuffle( array array) : array Returns shuffled version of array to_array( array array) : array Returns array . Booleans bool_and( bool value1, bool value2): bool Returns `value1 && value2 bool_not( bool value) : bool Returns `!value to_bool( string/number/array/bool value) : bool Casts value to a bool. Types type( any value) : string Returns the type name of a value, e.g. \"string\" .","title":"Functions"},{"location":"webhookscript/functions.html#global-functions","text":"","title":"Global Functions"},{"location":"webhookscript/functions.html#about-functions","text":"These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL.","title":"About Functions"},{"location":"webhookscript/functions.html#chaining","text":"Functions can be chained directly to a primitive (strings, numbers, arrays). These two statements are equivalent: 'Hello World' . echo () echo ( 'Hello World' ) They can even be chained, for example: 'Hello World' . hash ( 'md5' ). echo () Furthermore, functions that begin in a type can be referenced without it, for example, when calling the format function with the first argument being a string, the language infers that actually the string_format function should be used. echo ( string_format ( 'hello %s' , 'world' )) // hello world 'hello %s' . format ( 'world' ). echo () // hello world Read more about functions in the reference .","title":"Chaining"},{"location":"webhookscript/functions.html#custom-functions","text":"Define your own functions like this: function sub ( a , b ) { return a - b ; } Read more about functions in the reference .","title":"Custom functions"},{"location":"webhookscript/functions.html#debugging-and-output","text":"","title":"Debugging and output"},{"location":"webhookscript/functions.html#echostring-string","text":"Adds string to script debug output.","title":"echo(string string)"},{"location":"webhookscript/functions.html#ddany-value","text":"Stops Custom Action execution and adds value to script debug output.","title":"dd(any value)"},{"location":"webhookscript/functions.html#dumpany-value","text":"Adds value as a decoded string to script debug output.","title":"dump(any value)"},{"location":"webhookscript/functions.html#custom-action-variables","text":"These functions lets you interface with other Custom Actions by getting and setting variables from them. These functions are also how you retrieve Global Variables defined in the Control Panel.","title":"Custom Action Variables"},{"location":"webhookscript/functions.html#varstring-variable_name-mixed","text":"Retrieves the value of a Variable or Global Variable (defined in the Control Panel). The surrounding dollar signs are not mandatory. Returns null if the variable does not exist. var ( 'request.header.x-request-verification' ) // returns value of the `x-request-verification` header","title":"var(string variable_name) : mixed"},{"location":"webhookscript/functions.html#setstring-variable_name-string-variable_value","text":"Sets a Variable for usage in current action execution. The Variable is available to downstream actions, but not stored permanently.","title":"set(string variable_name, string variable_value)"},{"location":"webhookscript/functions.html#storestring-global_variable_name-any-value-any","text":"Permanently creates or updates a Global Variable (as defined in Control Panel.) The value can be retrieved with the var() function in subsequent action executions.","title":"store(string global_variable_name, any value): any"},{"location":"webhookscript/functions.html#variables-array","text":"A variable (not a function) containing an associative array with all available Webhook.site variables. user_agent = variables [ 'request.header.user-agent' ]","title":"variables : array"},{"location":"webhookscript/functions.html#http","text":"","title":"HTTP"},{"location":"webhookscript/functions.html#queryarray-form_values-string","text":"Converts an associative array into a form-style string, used for e.g. application/x-www-form-urlencoded requests or HTTP query strings. query ([ 'country' : 'Cura\u00e7ao' , 'population' : 158665 ]) // country=Cura%C3%A7ao&population=158665","title":"query(array form_values) : string"},{"location":"webhookscript/functions.html#requeststring-url-string-content-string-method-get-array-headers-array","text":"Sends a HTTP request and returns an array with the following keys containing response data: content status headers url The headers should be an array of strings in the form of ['Header-Key-1: Foo', 'Header-Key-2: Bar'] . To get a JSON document, validate if valid JSON, and get a property: response = request ( 'https://example.com' ) decoded = json_decode ( response [ 'content' ]) if ( decoded ) { value = decoded [ 'value' ] }","title":"request(string url, string content = '', string method = 'GET', array headers = []) : array"},{"location":"webhookscript/functions.html#url_decodestring-value-string","text":"Returns an URL-decoded version of value .","title":"url_decode(string value) : string"},{"location":"webhookscript/functions.html#url_encodestring-value-string","text":"Returns an URL-encoded version of value . url_encode ( 'here\\'s a value' ) // here%27s+a+value","title":"url_encode(string value) : string"},{"location":"webhookscript/functions.html#flow-control-and-responses","text":"","title":"Flow Control and Responses"},{"location":"webhookscript/functions.html#delayint-seconds-string-code","text":"Executes code in the future. Any output will be stored on the request and will show with a \"Was delayed\" label. The code will not inherit the execution scope. In this example, the format function is used to prepare the code string with a URL, causing {} to be replaced with with https://example.com . code = ' request( \"{}\", \\'{\"message\": \"Hello World!\"}\\', \"POST\" ) ' url = 'https://example.com' delay ( 5 , code . format ( url )); The maximum amount of seconds allowed is 604800 (7 days).","title":"delay(int seconds, string code)"},{"location":"webhookscript/functions.html#execstring-code-any","text":"Executes code in code and returns the result. The code will inherit the execution scope.","title":"exec(string code) : any"},{"location":"webhookscript/functions.html#importstring-url-any","text":"Downloads code located at url and returns the result. The code will inherit the execution scope. As an example, this can be used if you want to re-use code. Just upload it to a server or e.g. Github and use it in different WebhookScript actions. result = import ( 'https://raw.githubusercontent.com/fredsted/webhookscripts/ec22946a83ea85f607fcc6bff83f9d81ed2fe4ed/hello_world.ws' ) echo ( result ) // value","title":"import(string url) : any"},{"location":"webhookscript/functions.html#respondstring-content-int-status-array-headers","text":"Stops Custom Action execution and returns a response.","title":"respond(string content, int status, array headers)"},{"location":"webhookscript/functions.html#stop","text":"Stops Custom Action execution.","title":"stop()"},{"location":"webhookscript/functions.html#set_contentstring-content","text":"Sets or overwrites the response content of the URL. Script execution continues.","title":"set_content(string content)"},{"location":"webhookscript/functions.html#set_headerstring-header_name-string-header_value","text":"Sets or overwrites a response header of the URL. Script execution continues.","title":"set_header(string header_name, string header_value)"},{"location":"webhookscript/functions.html#set_responsestring-content-int-status-array-headers","text":"Sets or overwrites response content, status and headers in single function. Script execution continues. headers should be an array of strings e.g. [\"X-Example: Value\", \"X-Foo: Bar\"] .","title":"set_response(string content, int status, array headers)"},{"location":"webhookscript/functions.html#set_statusnumber-status","text":"Sets or overwrites the HTTP response status of the current URL. Script execution continues.","title":"set_status(number status)"},{"location":"webhookscript/functions.html#string","text":"","title":"String"},{"location":"webhookscript/functions.html#base64_decodestring-string-string","text":"Returns a base64-encoded string.","title":"base64_decode(string string) : string"},{"location":"webhookscript/functions.html#base64_encodestring-string-string","text":"Returns decoded base64 string.","title":"base64_encode(string string) : string"},{"location":"webhookscript/functions.html#csv_to_arraystring-csvstring-string-delimiter-int-headeroffset-string-enclosure-string-escape-array","text":"Takes a CSV string and outputs to an array, with each row being an item in the array. Optionally, if headerOffset is delimiter will explicitly set the CSV delimiter the parser will attempt to use (e.g. ; ). Must be a single character. Defaults to , (comma.) headerOffset , when specified, causes the output array item's keys to be set to the header values. Setting to 0 will mark the first row as the header row. enclosure sets the field enclosure character. Must be a single character. Defaults to \" (double quote.) escape sets the field escape character. Must be a single character. Defaults to \\ (backslash.) csv_content = 'firstname,lastname,title \"M. J.\",Plumley,\"Sr. Developer\" Emily,\"Jenna Platt\",\"Chief Information Officer\"' array = csv_to_array ( csv_content , ',' , 0 ) echo ( json_encode ( array )) // [ // { // \"firstname\": \"John\", // \"lastname\": \"Doe\", // \"title\": \"Sr. Developer\" // }, // { // \"firstname\": \"Emily\", // \"lastname\": \"Jenna Platt\", // \"title\": \"Chief Information Officer\" // } // ]","title":"csv_to_array(string csvString, string delimiter, int headerOffset, string enclosure, string escape) : array"},{"location":"webhookscript/functions.html#hashstringnumber-value-string-algo-string","text":"Returns a hashed version of value using the algo algorithm. hash('md5', 'hello world') // 5eb63bbbe01eeed093cb22bb8f5acdc3 The following built-in algorithms are available: md2 , md4 , md5 , sha1 , sha224 , sha256 , sha384 , sha512/224 , sha512/256 , sha512 , sha3-224 , sha3-256 , sha3-384 , sha3-512 , ripemd128 , ripemd160 , ripemd256 , ripemd320 , whirlpool , tiger128,3 , tiger160,3 , tiger192,3 , tiger128,4 , tiger160,4 , tiger192,4 , snefru , snefru256 , gost , gost-crypto , adler32 , crc32 , crc32b , fnv132 , fnv1a32 , fnv164 , fnv1a64 , joaat , haval128,3 , haval160,3 , haval192,3 , haval224,3 , haval256,3 , haval128,4 , haval160,4 , haval192,4 , haval224,4 , haval256,4 , haval128,5 , haval160,5 , haval192,5 , haval224,5 , haval256,5 .","title":"hash(string/number value, string algo) : string"},{"location":"webhookscript/functions.html#json_decodestring-json-array","text":"Decodes json and returns an array","title":"json_decode(string json) : array"},{"location":"webhookscript/functions.html#json_encodearray-array-string","text":"Takes an array and encodes it as a JSON string","title":"json_encode(array array) : string"},{"location":"webhookscript/functions.html#json_pathstring-json-string-jsonpath-bool-return_first-true-string","text":"Returns the result of a json string parsed using the JSONPath functionality. Per default, if there's just one match (e.g. if matching on a property value that's a string), this value is returned. To always return an array, set return_first to false. dump ( json_path ( '{\"v\": []}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": []}' , 'v[*]' )) // [] // \"\" dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\"]}' , 'v[*]' )) // [0: \"item1\"] // \"item1\" dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' , false )) dump ( json_path ( '{\"v\": [\"item1\", \"item2\"]}' , 'v[*]' )) // [0: \"item1\", 1: \"item2\"] // [0: \"item1\", 1: \"item2\"]","title":"json_path(string json, string jsonpath, bool return_first = true) : string"},{"location":"webhookscript/functions.html#regex_extractregex-regex-string-subject-arrayfalse","text":"Returns the matching string and all match groups as an array, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (\\w) (.*)\" , input ) dump ( output ) // [0: \"You're a good bot\", 1: \"a\", 2: \"good bot\"]","title":"regex_extract(regex regex, string subject) : array/false"},{"location":"webhookscript/functions.html#regex_extract_firstregex-regex-string-subject-stringfalse","text":"Returns the first match group of a regex, and false on failure. input = \"You're a good bot\" output = regex_extract ( r \"You're (.*)\" , input ) dump ( output ) // \"a good bot\"","title":"regex_extract_first(regex regex, string subject) : string/false"},{"location":"webhookscript/functions.html#regex_matchregex-regex-string-subject-stringfalse","text":"Returns the first matching string, otherwise false. input = \"You're a good bot\" output = regex_match ( r \"You're .*\" , input ) dump ( output ) // \"You're a good bot\"","title":"regex_match(regex regex, string subject) : string/false"},{"location":"webhookscript/functions.html#regex_to_stringregex-regex-string","text":"Returns the regex converted to a string","title":"regex_to_string(regex regex) : string"},{"location":"webhookscript/functions.html#string_containsstring-subject-numberstringregex-value-bool","text":"Returns boolean if subject contains value","title":"string_contains(string subject, number/string/regex value) : bool"},{"location":"webhookscript/functions.html#string_find_firststring-subject-numberstring-value-number","text":"Returns position of value in subject , or false if not found","title":"string_find_first(string subject, number/string value) : number"},{"location":"webhookscript/functions.html#string_find_laststring-subject-numberstring-value-number","text":"Returns position of value in subject , or false if not found","title":"string_find_last(string subject, number/string value) : number"},{"location":"webhookscript/functions.html#string_formatstring-formatstring-any-items-string","text":"Sprintf-like formatting of formatString with items , see PHP sprintf docs.","title":"string_format(string formatString, ...any items) : string"},{"location":"webhookscript/functions.html#string_joinstring-subject-array-items-numberstringboolarray-string","text":"Joins items with string subject","title":"string_join(string subject, array items (number/string/bool/array)) : string"},{"location":"webhookscript/functions.html#string_lengthstring-string-number","text":"Returns length of string (multibyte-aware)","title":"string_length(string string) : number"},{"location":"webhookscript/functions.html#string_number_ofstring-string-number","text":"Returns number value of string","title":"string_number_of(string string) : number"},{"location":"webhookscript/functions.html#string_replacestring-subject-string-search-string-replace-string","text":"Replaces string search with replace found in subject .","title":"string_replace(string subject, string search, string replace) : string"},{"location":"webhookscript/functions.html#string_reversestring-subject-string","text":"Reverses string subject","title":"string_reverse(string subject) : string"},{"location":"webhookscript/functions.html#string_shufflestring-string-string","text":"Returns string where the individual characters has been shuffled.","title":"string_shuffle(string string) : string"},{"location":"webhookscript/functions.html#string_splitstring-subject-stringregex-delimiter-array","text":"Returns array of split string subject with delimiter","title":"string_split(string subject, string/regex delimiter) : array"},{"location":"webhookscript/functions.html#to_regexstring-regex-regex","text":"Converts a regex string to a regex type","title":"to_regex(string regex) : regex"},{"location":"webhookscript/functions.html#to_stringstringnumberbool-value-string","text":"Returns value as string","title":"to_string(string/number/bool value) : string"},{"location":"webhookscript/functions.html#xpathstring-xpath-string-input-stringnull","text":"Returns the first result of an XPath query on XML document input . Given a request with the following content: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> xpath(var('$request.content$'), '//employee[1]') // returns \"Jack\" var('$request.content$').xpath('//employee[1]') // returns \"Jack\" More information and examples regarding XPath .","title":"xpath(string xpath, string input): string/null"},{"location":"webhookscript/functions.html#xpath_allstring-xpath-string-input-stringnull","text":"Returns the results of an XPath query on XML document input as an array. Given a request with the following content: <?xml version=\"1.0\"?> <organization name= \"ExampleCo\" > <employees> <employee id= \"1\" > Jack </employee> <employee id= \"2\" > Ann </employee> </employees> </organization> xpath_all(var('$request.content$'), '//employee]') // returns [0: \"Jack\", 1: \"Ann\"] var('$request.content$').xpath('//employee') // returns [0: \"Jack\", 1: \"Ann\"] More information and examples regarding XPath .","title":"xpath_all(string xpath, string input): string/null"},{"location":"webhookscript/functions.html#date-manipulation","text":"In WebhookScript, dates are not a specific type, and ar expressed in strings instead, which WebhookScript will attempt to parse. If possible, we recommend using a specific date format like ISO-8601 which leaves little doubt for misunderstanding.","title":"Date Manipulation"},{"location":"webhookscript/functions.html#date-format-characters","text":"WebhookScript uses the ISO format for converting and formatting dates, and the format is compatible with the Moment.js format method . The following examples are based on the date 2017-01-05 17:04:05.084512 . Code Example Description OD 5 Day number with alternative numbers such as \u4e09 for 3 if locale is ja_JP OM 1 Month number with alternative numbers such as \u1040\u1042 for 2 if locale is my_MM OY 2017 Year number with alternative numbers such as \u06f1\u06f9\u06f9\u06f8 for 1998 if locale is fa OH 17 24-hours number with alternative numbers such as \u1091\u1093 for 13 if locale is shn_MM Oh 5 12-hours number with alternative numbers such as \u5341\u4e00 for 11 if locale is lzh_TW Om 4 Minute number with alternative numbers such as \u0b6b\u0b6d for 57 if locale is or Os 5 Second number with alternative numbers such as \u5341\u4e94 for 15 if locale is ja_JP D 5 Day of month number (from 1 to 31) DD 05 Day of month number with trailing zero (from 01 to 31) Do 5th Day of month with ordinal suffix (from 1st to 31th), translatable d 4 Day of week number (from 0 (Sunday) to 6 (Saturday)) dd Th Minified day name (from Su to Sa), transatable ddd Thu Short day name (from Sun to Sat), transatable dddd Thursday Day name (from Sunday to Saturday), transatable DDD 5 Day of year number (from 1 to 366) DDDD 005 Day of year number with trailing zeros (3 digits, from 001 to 366) DDDo 5th Day of year number with ordinal suffix (from 1st to 366th), translatable e 4 Day of week number (from 0 (Sunday) to 6 (Saturday)), similar to \"d\" but this one is translatable (takes first day of week of the current locale) E 4 Day of week number (from 1 (Monday) to 7 (Sunday)) H 17 Hour from 0 to 23 HH 17 Hour with trailing zero from 00 to 23 h 5 Hour from 0 to 12 hh 05 Hour with trailing zero from 00 to 12 k 17 Hour from 1 to 24 kk 17 Hour with trailing zero from 01 to 24 m 4 Minute from 0 to 59 mm 04 Minute with trailing zero from 00 to 59 a pm Meridiem am/pm A PM Meridiem AM/PM s 5 Second from 0 to 59 ss 05 Second with trailing zero from 00 to 59 S 0 Second tenth SS 08 Second hundredth (on 2 digits with trailing zero) SSS 084 Millisecond (on 3 digits with trailing zeros) SSSS 0845 Second ten thousandth (on 4 digits with trailing zeros) SSSSS 08451 Second hundred thousandth (on 5 digits with trailing zeros) SSSSSS 084512 Microsecond (on 6 digits with trailing zeros) SSSSSSS 0845120 Second ten millionth (on 7 digits with trailing zeros) SSSSSSSS 08451200 Second hundred millionth (on 8 digits with trailing zeros) SSSSSSSSS 084512000 Nanosecond (on 9 digits with trailing zeros) M 1 Month from 1 to 12 MM 01 Month with trailing zero from 01 to 12 MMM Jan Short month name, translatable MMMM January Month name, translatable Mo 1st Month with ordinal suffix from 1st to 12th, translatable Q 1 Quarter from 1 to 4 Qo 1st Quarter with ordinal suffix from 1st to 4th, translatable G 2017 ISO week year (see ISO week date) GG 2017 ISO week year (on 2 digits with trailing zero) GGG 2017 ISO week year (on 3 digits with trailing zeros) GGGG 2017 ISO week year (on 4 digits with trailing zeros) GGGGG 02017 ISO week year (on 5 digits with trailing zeros) g 2017 Week year according to locale settings, translatable gg 2017 Week year according to locale settings (on 2 digits with trailing zero), translatable ggg 2017 Week year according to locale settings (on 3 digits with trailing zeros), translatable gggg 2017 Week year according to locale settings (on 4 digits with trailing zeros), translatable ggggg 02017 Week year according to locale settings (on 5 digits with trailing zeros), translatable W 1 ISO week number in the year (see ISO week date) WW 01 ISO week number in the year (on 2 digits with trailing zero) Wo 1st ISO week number in the year with ordinal suffix, translatable w 1 Week number in the year according to locale settings, translatable ww 01 Week number in the year according to locale settings (on 2 digits with trailing zero) wo 1st Week number in the year according to locale settings with ordinal suffix, translatable x 1483635845085 Millisecond-precision timestamp (same as date.getTime() in JavaScript) X 1483635845 Timestamp (number of seconds since 1970-01-01) Y 2017 Full year from -9999 to 9999 YY 17 Year on 2 digits from 00 to 99 YYYY 2017 Year on 4 digits from 0000 to 9999 YYYYY 02017 Year on 5 digits from 00000 to 09999 YYYYYY +002017 Year on 5 digits with sign from -09999 to +09999 z UTC Abbreviated time zone name zz UTC Time zone name Z +00:00 Time zone offset HH:mm ZZ +0000 Time zone offset HHmm Source: Carbon Docs","title":"Date format characters"},{"location":"webhookscript/functions.html#date-locales-available","text":"Click here for a list of possible locales/translations available for date display functions.","title":"Date locales available"},{"location":"webhookscript/functions.html#to_datestring-date-string-format-string","text":"Will attempt to parse a string to a ISO-8601 formatted date string. If specified, format is used to parse the date without having to guess the format (see the Date Format Characters above.) Many formats are supported, like relative dates and various specified date formats. If the date is invalid or could not be guessed, null is returned. // Relative formats 'last wednesday 4 am' . to_date () // 2020-05-27T04:00:00.000000Z 'first monday august 2019' . to_date () // 2019-08-05T00:00:00.000000Z // Automatic format guessing '2020-01-01 23:02:01' . to_date () // 2020-01-01T23:02:01.000000Z // Unix timestamp '@1215282385' . to_date () // 2008-07-05T18:26:25.000000Z // Custom date format '2/4/12 06:03' . to_date ( 'M/D/YY HH:mm' ) // 2012-02-04T06:03:00.000000Z // To escape characters in the format string, backslashes can be used '2020-01-05 12h30m15s' . to_date ( 'YYYY-MM-DD HH\\\\hmm\\\\mss\\\\s' ) // 2020-01-05T12:30:15.000000Z","title":"to_date(string date, ?string format): string"},{"location":"webhookscript/functions.html#date_formatstring-date-string-format-string-locale-string","text":"Returns a date parsed to the format specified in format . date_format ( '2008-07-05T18:26:25.000000Z' , 'YYYY-MM-DD' ) // 2008-07-05 date_format ( '2008-07-05T18:26:25.000000Z' , 'LLLL' , 'da' ) // l\u00f8rdag d. 5. juli 2008 kl. 18:26 // If no format is specified, a default human readable readable string is returned date_format ( '2008-07-05T18:26:25.000000Z' ) // Sat Jul 05 2008 18:26:25 GMT+0000","title":"date_format(string date, ?string format, ?string locale): string"},{"location":"webhookscript/functions.html#date_to_arraystring-array","text":"Returns an array containing all the components of a given date. dump ( date_to_array ( '2008-07-05T18:26:25.324542Z' )) // [ // \"year\": 2008, // \"month\": 7, // \"day\": 5, // \"dayOfWeek\": 6, // \"dayOfYear\": 187, // \"hour\": 18, // \"minute\": 26, // \"second\": 25, // \"micro\": 324542, // \"timestamp\": 1215282385, // \"formatted\": \"2008-07-05 18:26:25\", // \"timezone\": \"Z\" // ]","title":"date_to_array(string): array"},{"location":"webhookscript/functions.html#date_intervalstring-date1-string-date2-string-format-stringint","text":"Calculates the interval between date1 and date2 . If no format string is specified, the interval is returned as the number of seconds between the dates, with the number being negative if date2 is before date1 . Note that for the format string, this function does not use the ISO format, but rather the uses the PHP DateInterval format specification . date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // -967620 date_interval ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , '%d days, %h hours, %i minutes' ) // 11 days, 4 hours, 47 minutes","title":"date_interval(string date1, string date2, ?string format): string/int"},{"location":"webhookscript/functions.html#date_interval_humanstring-date1-string-date2-string-locale-stringint","text":"Formats the difference between 2 dates in a way that's easy to read for humans. If no locale is specified, English is used. date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' ) // 1 week after date_interval_human ( '2008-07-16T23:13:26.234212Z' , '2008-07-05T18:26:25.324542Z' , 'es' ) // 1 semana despu\u00e9s","title":"date_interval_human(string date1, string date2, ?string locale): string/int"},{"location":"webhookscript/functions.html#math-and-numbers","text":"","title":"Math and Numbers"},{"location":"webhookscript/functions.html#absnumber-number-number","text":"","title":"abs(number number) : number"},{"location":"webhookscript/functions.html#atannumber-number-number","text":"","title":"atan(number number) : number"},{"location":"webhookscript/functions.html#ceilnumber-number-number","text":"","title":"ceil(number number) : number"},{"location":"webhookscript/functions.html#cosnumber-number-number","text":"","title":"cos(number number) : number"},{"location":"webhookscript/functions.html#floornumber-number-number","text":"","title":"floor(number number) : number"},{"location":"webhookscript/functions.html#maxarray-numbers-number","text":"","title":"max(array numbers) : number"},{"location":"webhookscript/functions.html#minarray-numbers-number","text":"","title":"min(array numbers) : number"},{"location":"webhookscript/functions.html#modnumber-number-number-divisor-number","text":"Returns the remainder after number is divided by divisor .","title":"mod(number number, number divisor) : number"},{"location":"webhookscript/functions.html#number_lengthnumber-number-number","text":"","title":"number_length(number number) : number"},{"location":"webhookscript/functions.html#pi-number","text":"Returns the value of Pi.","title":"pi() : number"},{"location":"webhookscript/functions.html#pownumber-number-number-power-number","text":"","title":"pow(number number, number power) : number"},{"location":"webhookscript/functions.html#randnumber-min-number-max-number","text":"Returns a random number between min and max .","title":"rand(number min, number max) : number"},{"location":"webhookscript/functions.html#roundnumber-number-number-precision-number","text":"","title":"round(number number, number precision) : number"},{"location":"webhookscript/functions.html#sinnumber-number-number","text":"","title":"sin(number number) : number"},{"location":"webhookscript/functions.html#sqrtnumber-number-number","text":"","title":"sqrt(number number) : number"},{"location":"webhookscript/functions.html#tannumber-number-number","text":"","title":"tan(number number) : number"},{"location":"webhookscript/functions.html#to_numberany-value-number","text":"","title":"to_number(any value) : number"},{"location":"webhookscript/functions.html#arrays","text":"","title":"Arrays"},{"location":"webhookscript/functions.html#array_containsarray-array-stringnumber-needle-bool","text":"Returns true or false depending on whether array contains needle","title":"array_contains(array array, string/number needle) : bool"},{"location":"webhookscript/functions.html#array_copyarray-array-array","text":"Returns a copy of array","title":"array_copy(array array) : array"},{"location":"webhookscript/functions.html#array_diffarray-array1-array-array2-array","text":"Returns the items of array1 that are not present in array2 while keeping the array indices.","title":"array_diff(array array1, array array2) : array"},{"location":"webhookscript/functions.html#array_getarray-array-stringnumber-index-any-default-any","text":"","title":"array_get(array array, string/number index, any default) : any"},{"location":"webhookscript/functions.html#array_hasarray-array-stringnumber-key-bool","text":"","title":"array_has(array array, string/number key) : bool"},{"location":"webhookscript/functions.html#array_lengtharray-array-number","text":"","title":"array_length(array array) : number`"},{"location":"webhookscript/functions.html#array_maparray-array-func-function","text":"Runs function with each array value, and returns array with key as result","title":"array_map(array array, func function)"},{"location":"webhookscript/functions.html#array_number_ofarray-stringnumber-value-number","text":"Returns amount of value","title":"array_number_of(array, string/number value) : number"},{"location":"webhookscript/functions.html#array_poparray-array-any","text":"Pop element off end of array","title":"array_pop(array array) : any"},{"location":"webhookscript/functions.html#array_pusharray-array-any-value-any","text":"Adds value to end of array and returns value","title":"array_push(array array, any value) : any"},{"location":"webhookscript/functions.html#array_randomarray-array-any","text":"Returns random value of array","title":"array_random(array array) : any"},{"location":"webhookscript/functions.html#array_reversearray-array-array","text":"Returns array in reverse order","title":"array_reverse(array array) : array"},{"location":"webhookscript/functions.html#array_shufflearray-array-array","text":"Returns shuffled version of array","title":"array_shuffle(array array) : array"},{"location":"webhookscript/functions.html#to_arrayarray-array-array","text":"Returns array .","title":"to_array(array array) : array"},{"location":"webhookscript/functions.html#booleans","text":"","title":"Booleans"},{"location":"webhookscript/functions.html#bool_andbool-value1-bool-value2-bool","text":"Returns `value1 && value2","title":"bool_and(bool value1, bool value2): bool"},{"location":"webhookscript/functions.html#bool_notbool-value-bool","text":"Returns `!value","title":"bool_not(bool value) : bool"},{"location":"webhookscript/functions.html#to_boolstringnumberarraybool-value-bool","text":"Casts value to a bool.","title":"to_bool(string/number/array/bool value) : bool"},{"location":"webhookscript/functions.html#types","text":"","title":"Types"},{"location":"webhookscript/functions.html#typeany-value-string","text":"Returns the type name of a value, e.g. \"string\" .","title":"type(any value) : string"},{"location":"webhookscript/reference.html","text":"Language Reference These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL. Syntax The language is built with a familiar PHP/JS/C-like syntax. Statements are separated using the ; character , but this is only required for multiple statements on the same line: Using semicolons (recommended) : js a = 1 + 2; b = a + 3; c = b - a; Using newlines: js a = 1 + 2 b = a + 3 c = b - a Data types The language has 6 data types: Bool Number String Regex Array Function Boolean Example usage: a = true ; b = 1 == 2 ; // false c = b == false ; // true d = c == \"hello\" ; // ERR: Cannot compare 'bool' and 'string' e = \"hello\" == r \"[0-9]\" ; // false f = \"hello\" == r \"l{2}\" ; // true Number Both integer and float values are supported. Example usage: a = 4 - 3 ; // 1 b = a / 3 ; // 0.333... String This data types represents a series of characters. Multi-byte characters (accents, diacritics) are treated properly. Example usage: a = \"hello\" ; b = \"w\u00f3\u00f3\u00f3rld!\" ; c = a + \" \" + b ; // \"hello w\u00f3\u00f3\u00f3rld!\" Regex Regex data type exists for advanced string matching. It is defined using the r\"...\" literal (a string literal prefixed with r ) and treated as PCRE (Perl-compatible) regular expressions (the same as within PHP itself) with Unicode mode enabled. Example usage: a = \"facebook\" ; b = r \"[o]{2}.*\" ; c = a == b ; // true Array Arrays are untyped (PHP-style) containers that can accomodate multiple values of different (or same) types. Optionally, array index can be defined for a value. By default, integer index starting from the lowest index found (or from 0 ) is used, but strings can also be used. Example usage: a = [ \"abc\" , 123 , 4 : true , false , r \"[A-Z]+\" ]; // Resulting array: [0: \"abc\", 1: 123, 4: true, 5: false, 6: r\"[A-Z]+\"] b = json_encode ([ \"the_number\" : 123 , \"other_numbers\" : [ 42 , 1337 , 80085 ]]) // Result: // { // \"the_number\": 123, // \"other_numbers\": [ // 42, // 1337, // 80085 // ] // } Ranges Simple way of defining ranges between numbers is provided via the a..[s..]b range syntax. a is the from value. b is the to value, inclusive, if it is not \"skipped\" due to a rather large step (see below). s (optionally) is the step value which to use. Example usage: a = 1..4 ; // (array) [0: 1, 1: 2, 4: 3, 5: 4] b = 1..2 . .4 ; // (array) [0: 1, 1: 3] c = 10..4 . .16 ; // (array) [0: 10, 1: 14] _x = 3 _y = 6 _z = 2 d = _x .. _z .. _y ; // (array) [0: 3, 1: 5] Return value of such \"range literal\" is a new array having values that are based on the range's parameters. Functions Function is a value type that represents a \"unit\" of some self-contained logic . In WebhookScript they have their own type and are treated as first-class citizens: they can be stored inside variables and passed around as such. Direct invocation of an anonymous function is supported, provided that the anonymous function's definition is enclosed in parentheses. A function does capture its surrounding variables. Example usage: // Traditional definition. function sub ( a , b ) { return a - b ; } // A variable \"sub\" that holds the \"sub()\" function is now defined in current scope. sub ( 1 , 2 ); // Returns -1 // Storing a function value into a variable. // Note: This is equivalent to the previous definition. sub_2 = function ( a , b ) { return a - b ; }; // A variable \"sub_2\" that holds the \"sub_2()\" function is now defined in current scope. sub_2 ( 1 , 2 ); // Returns -1 // Creating a function with alternative, short syntax. // Note: This is equivalent all of the previous definitions. sub_3 = ( a , b ) => { return a - b ; }; // A variable \"sub_3\" that holds the \"sub_3()\" function is now defined in current scope. sub_3 ( 1 , 2 ); // Returns -1 // Creating and using an anonymous function directly. // Using an alternative, short syntax. (( a , b ) => { return a - b ; })( 1 , 2 ); // Returns -1 Chained functions In addition to classical function invocation, WebhookScript additionaly supports Uniform Function Call Syntax (UFCS) as a way to call functions \"on values\". Essentially, it means that calling foo(bar); is equivalent to calling bar.foo() , or - to provide an example with additional parameters - that calling foo(bar, 1, true, \"something\"); is equivalent to calling bar.foo(1, true, \"something\") . Value-type based inference of called function name When using chained function invocation, the interpreter will try to find the most fitting function to call . \"Most fitting\" meaning that when the client calls bar() function on a value having the string type, WebhookScript will try to find and use the string_bar() first. If such function is not defined, only then will the interpreter use the original bar() function. Consider this a syntactic sugar to make coding in WebhookScript a bit more user-friendly. Because of this the user is able to call \"something\".length() on a string the same way as calling [1, 2, 3].length() on an array, even though there are in fact two separate functions string_length() and array_length() invoked behind the scenes. Operators Plethora of well known operators can be used to define relationships between and/or affect various values. Different operators can have various effects on various data types, some of which are covered down below. Precedence Precedence of various operators is defined as follows (from highest to lowest) : - ( ... ) (parentheses) - ! (logical not) - * , / (multiplication/division) - + , - (addition/subtraction) - == , != , >= , <= , > , < (comparison) - and (logical and) - or (logical not) - = (assignment) Precedence example Raw source Equivalent to 1 + 2 + 3 + 4 ((1 + 2) + 3) + 4 1 - 2 + 3 - 4 ((1 - 2) + 3) - 4 1 + 2 * 3 + 4 1 + (2 * 3) + 4 1 + 2 * 3 / 4 1 + ((2 * 3) / 4) 1 + -2 * 3 / 4 1 + (((-2) * 3) / 4) 1 and 2 or 3 and 4 (1 and 2) or (3 and 4) 1 or 2 or 3 and 4 (1 or 2) or (3 and 4) 1 or !2 or !3 and 4 (1 or (!2)) or ((!3) and 4)) x = true or false and true x = (true or (false and true)) x = a == b x = (a == b) x = a > 5 and b < 6 x = ((a > 5) and (b < 6)) Logical operators and Returns true if both operands are truthy . Otherwise returns false . or Returns true if either one (or both) operand is truthy . Otherwise returns false . Negation ! Negate the value located after this operator. Examples: js a = true; b = !a; // false c = !b; // true d = !!b; // false Assignment = Assigns some value to a variable. Can also be used to insert values to values that support it (eg. arrays). Examples: js a = 1; b = \"a word\"; c = false; d = r\"regul[ar]+\"; e = [\"x\", \"b\": \"z\"]; e[\"c\"] = \"x\"; // e == [\"x\", \"b\": \"z\", \"c\": \"x\"] Addition and multiplication + , - Performs addition (subtraction) of two values. Numbers: + Add two numbers. - Subtract two numbers. Strings: + Concatenate two strings. - Removes all occurences of the right side from the left side. - (if the right side is a Regex value) Removes all matches of the regex from the left side string. Examples: js a = 5 + 4 // (number) 9 b = 5 - 4; // (number) 1 c = \"a word and number \" + 5.to_string(); // (string) \"a word and number 5\" d = \"a word and number {}\".format(5); // (string) \"a word and number 5\" e = \"a word\" + \" and one more\"; // (string) \"a word and one more\" f = \"a word\" - \"or\"; // (string) \"a wd\" g = \"regular expressions\" - r\"regul[ar]+\\s*\"; // (string) \"expressions\" _x = 5 + \"4\" // ERR: Cannot use operator '+' with 'number' and 'string' _x = \"a word and number \" + 5; // ERR: Cannot use operator '+' with 'number' and 'string' * , / Performs multiplication (division) of two values. Numbers: + Multiply two numbers. - Divide two numbers. Examples: js a = 1 * -2; // (number) -2 b = 2 * 3; // (number) 6 c = 2 * \"3\"; // (string) \"33\" d = \"3\" * 4; // (string) \"3333\" e = 5 / 4; // (number) 1.25 g = 5 / 5; // (number) 1 _x = \"2\" * \"3\"; // ERR: Cannot use operator '*' with 'string' and 'string' _x = 5 / \"4\"; // ERR: Cannot use operator '/' with 'number' and 'string' _x = \"20\" / 4; // ERR: Cannot use operator '/' with 'string' and 'number' Control structures You can control the flow of your program with several kinds of statements the language provides. if construct The if construct - as in all other programming languages - allows you to dynamically branch your program flow based on some conditions during runtime. Examples a = true ; if ( a ) { b = 1 ; } // b == 1 c = false ; if ( c ) { d = 1 ; } else { d = 2 ; } // d == 2 a = false ; b = true ; c = 5 ; if ( a or b ) { d = 1 ; if ( d < c ) { e = d + c ; } } // d == 1, e == 6 for construct The for construct allows you to iterate over a value that supports it ( array or string values) , while performing a task on that collection's single item. Examples txt = \"123456789\" ; result = []; for ( n in txt ) { if ( 5 > n . to_number () > 0 ) { result . push ( n ); } } // result == [0: \"1\", 1: \"2\", 2: \"3\", 3: \"4\"] prices = [ 100 , 200 , 300 , 600 , 1200 ]; sentence_template = \"This costs {} units of money!\" ; results = []; for ( price in prices ) { results . push ( sentence_template . format ( price )); } // results == [ // 0: \"This costs 100 units of money!\", // 1: \"This costs 200 units of money!\", // 2: \"This costs 300 units of money!\", // 3: \"This costs 600 units of money!\", // 4: \"This costs 1200 units of money!\" // ] Note: The flow of program inside the for cycle can be controlled further by using the continue and break statements. while construct The while construct does a thing if a specified condition is met (if the condition expression has a truthy value). c = 0 ; while ( c < 100 ) { total = total + c ; c = c + 1 ; } // total == 4950 Note: The flow of program inside the while cycle can be controlled further by using the continue and break statements.","title":"Reference"},{"location":"webhookscript/reference.html#language-reference","text":"These are the functions that can be used in your script, and includes various utility functions and functions to interact with your Webhook.site URL.","title":"Language Reference"},{"location":"webhookscript/reference.html#syntax","text":"The language is built with a familiar PHP/JS/C-like syntax. Statements are separated using the ; character , but this is only required for multiple statements on the same line: Using semicolons (recommended) : js a = 1 + 2; b = a + 3; c = b - a; Using newlines: js a = 1 + 2 b = a + 3 c = b - a","title":"Syntax"},{"location":"webhookscript/reference.html#data-types","text":"The language has 6 data types: Bool Number String Regex Array Function","title":"Data types"},{"location":"webhookscript/reference.html#boolean","text":"Example usage: a = true ; b = 1 == 2 ; // false c = b == false ; // true d = c == \"hello\" ; // ERR: Cannot compare 'bool' and 'string' e = \"hello\" == r \"[0-9]\" ; // false f = \"hello\" == r \"l{2}\" ; // true","title":"Boolean"},{"location":"webhookscript/reference.html#number","text":"Both integer and float values are supported. Example usage: a = 4 - 3 ; // 1 b = a / 3 ; // 0.333...","title":"Number"},{"location":"webhookscript/reference.html#string","text":"This data types represents a series of characters. Multi-byte characters (accents, diacritics) are treated properly. Example usage: a = \"hello\" ; b = \"w\u00f3\u00f3\u00f3rld!\" ; c = a + \" \" + b ; // \"hello w\u00f3\u00f3\u00f3rld!\"","title":"String"},{"location":"webhookscript/reference.html#regex","text":"Regex data type exists for advanced string matching. It is defined using the r\"...\" literal (a string literal prefixed with r ) and treated as PCRE (Perl-compatible) regular expressions (the same as within PHP itself) with Unicode mode enabled. Example usage: a = \"facebook\" ; b = r \"[o]{2}.*\" ; c = a == b ; // true","title":"Regex"},{"location":"webhookscript/reference.html#array","text":"Arrays are untyped (PHP-style) containers that can accomodate multiple values of different (or same) types. Optionally, array index can be defined for a value. By default, integer index starting from the lowest index found (or from 0 ) is used, but strings can also be used. Example usage: a = [ \"abc\" , 123 , 4 : true , false , r \"[A-Z]+\" ]; // Resulting array: [0: \"abc\", 1: 123, 4: true, 5: false, 6: r\"[A-Z]+\"] b = json_encode ([ \"the_number\" : 123 , \"other_numbers\" : [ 42 , 1337 , 80085 ]]) // Result: // { // \"the_number\": 123, // \"other_numbers\": [ // 42, // 1337, // 80085 // ] // }","title":"Array"},{"location":"webhookscript/reference.html#ranges","text":"Simple way of defining ranges between numbers is provided via the a..[s..]b range syntax. a is the from value. b is the to value, inclusive, if it is not \"skipped\" due to a rather large step (see below). s (optionally) is the step value which to use. Example usage: a = 1..4 ; // (array) [0: 1, 1: 2, 4: 3, 5: 4] b = 1..2 . .4 ; // (array) [0: 1, 1: 3] c = 10..4 . .16 ; // (array) [0: 10, 1: 14] _x = 3 _y = 6 _z = 2 d = _x .. _z .. _y ; // (array) [0: 3, 1: 5] Return value of such \"range literal\" is a new array having values that are based on the range's parameters.","title":"Ranges"},{"location":"webhookscript/reference.html#functions","text":"Function is a value type that represents a \"unit\" of some self-contained logic . In WebhookScript they have their own type and are treated as first-class citizens: they can be stored inside variables and passed around as such. Direct invocation of an anonymous function is supported, provided that the anonymous function's definition is enclosed in parentheses. A function does capture its surrounding variables. Example usage: // Traditional definition. function sub ( a , b ) { return a - b ; } // A variable \"sub\" that holds the \"sub()\" function is now defined in current scope. sub ( 1 , 2 ); // Returns -1 // Storing a function value into a variable. // Note: This is equivalent to the previous definition. sub_2 = function ( a , b ) { return a - b ; }; // A variable \"sub_2\" that holds the \"sub_2()\" function is now defined in current scope. sub_2 ( 1 , 2 ); // Returns -1 // Creating a function with alternative, short syntax. // Note: This is equivalent all of the previous definitions. sub_3 = ( a , b ) => { return a - b ; }; // A variable \"sub_3\" that holds the \"sub_3()\" function is now defined in current scope. sub_3 ( 1 , 2 ); // Returns -1 // Creating and using an anonymous function directly. // Using an alternative, short syntax. (( a , b ) => { return a - b ; })( 1 , 2 ); // Returns -1","title":"Functions"},{"location":"webhookscript/reference.html#chained-functions","text":"In addition to classical function invocation, WebhookScript additionaly supports Uniform Function Call Syntax (UFCS) as a way to call functions \"on values\". Essentially, it means that calling foo(bar); is equivalent to calling bar.foo() , or - to provide an example with additional parameters - that calling foo(bar, 1, true, \"something\"); is equivalent to calling bar.foo(1, true, \"something\") .","title":"Chained functions"},{"location":"webhookscript/reference.html#value-type-based-inference-of-called-function-name","text":"When using chained function invocation, the interpreter will try to find the most fitting function to call . \"Most fitting\" meaning that when the client calls bar() function on a value having the string type, WebhookScript will try to find and use the string_bar() first. If such function is not defined, only then will the interpreter use the original bar() function. Consider this a syntactic sugar to make coding in WebhookScript a bit more user-friendly. Because of this the user is able to call \"something\".length() on a string the same way as calling [1, 2, 3].length() on an array, even though there are in fact two separate functions string_length() and array_length() invoked behind the scenes.","title":"Value-type based inference of called function name"},{"location":"webhookscript/reference.html#operators","text":"Plethora of well known operators can be used to define relationships between and/or affect various values. Different operators can have various effects on various data types, some of which are covered down below.","title":"Operators"},{"location":"webhookscript/reference.html#precedence","text":"Precedence of various operators is defined as follows (from highest to lowest) : - ( ... ) (parentheses) - ! (logical not) - * , / (multiplication/division) - + , - (addition/subtraction) - == , != , >= , <= , > , < (comparison) - and (logical and) - or (logical not) - = (assignment)","title":"Precedence"},{"location":"webhookscript/reference.html#precedence-example","text":"Raw source Equivalent to 1 + 2 + 3 + 4 ((1 + 2) + 3) + 4 1 - 2 + 3 - 4 ((1 - 2) + 3) - 4 1 + 2 * 3 + 4 1 + (2 * 3) + 4 1 + 2 * 3 / 4 1 + ((2 * 3) / 4) 1 + -2 * 3 / 4 1 + (((-2) * 3) / 4) 1 and 2 or 3 and 4 (1 and 2) or (3 and 4) 1 or 2 or 3 and 4 (1 or 2) or (3 and 4) 1 or !2 or !3 and 4 (1 or (!2)) or ((!3) and 4)) x = true or false and true x = (true or (false and true)) x = a == b x = (a == b) x = a > 5 and b < 6 x = ((a > 5) and (b < 6))","title":"Precedence example"},{"location":"webhookscript/reference.html#logical-operators","text":"and Returns true if both operands are truthy . Otherwise returns false . or Returns true if either one (or both) operand is truthy . Otherwise returns false .","title":"Logical operators"},{"location":"webhookscript/reference.html#negation","text":"! Negate the value located after this operator. Examples: js a = true; b = !a; // false c = !b; // true d = !!b; // false","title":"Negation"},{"location":"webhookscript/reference.html#assignment","text":"= Assigns some value to a variable. Can also be used to insert values to values that support it (eg. arrays). Examples: js a = 1; b = \"a word\"; c = false; d = r\"regul[ar]+\"; e = [\"x\", \"b\": \"z\"]; e[\"c\"] = \"x\"; // e == [\"x\", \"b\": \"z\", \"c\": \"x\"]","title":"Assignment"},{"location":"webhookscript/reference.html#addition-and-multiplication","text":"+ , - Performs addition (subtraction) of two values. Numbers: + Add two numbers. - Subtract two numbers. Strings: + Concatenate two strings. - Removes all occurences of the right side from the left side. - (if the right side is a Regex value) Removes all matches of the regex from the left side string. Examples: js a = 5 + 4 // (number) 9 b = 5 - 4; // (number) 1 c = \"a word and number \" + 5.to_string(); // (string) \"a word and number 5\" d = \"a word and number {}\".format(5); // (string) \"a word and number 5\" e = \"a word\" + \" and one more\"; // (string) \"a word and one more\" f = \"a word\" - \"or\"; // (string) \"a wd\" g = \"regular expressions\" - r\"regul[ar]+\\s*\"; // (string) \"expressions\" _x = 5 + \"4\" // ERR: Cannot use operator '+' with 'number' and 'string' _x = \"a word and number \" + 5; // ERR: Cannot use operator '+' with 'number' and 'string' * , / Performs multiplication (division) of two values. Numbers: + Multiply two numbers. - Divide two numbers. Examples: js a = 1 * -2; // (number) -2 b = 2 * 3; // (number) 6 c = 2 * \"3\"; // (string) \"33\" d = \"3\" * 4; // (string) \"3333\" e = 5 / 4; // (number) 1.25 g = 5 / 5; // (number) 1 _x = \"2\" * \"3\"; // ERR: Cannot use operator '*' with 'string' and 'string' _x = 5 / \"4\"; // ERR: Cannot use operator '/' with 'number' and 'string' _x = \"20\" / 4; // ERR: Cannot use operator '/' with 'string' and 'number'","title":"Addition and multiplication"},{"location":"webhookscript/reference.html#control-structures","text":"You can control the flow of your program with several kinds of statements the language provides.","title":"Control structures"},{"location":"webhookscript/reference.html#if-construct","text":"The if construct - as in all other programming languages - allows you to dynamically branch your program flow based on some conditions during runtime.","title":"if construct"},{"location":"webhookscript/reference.html#examples","text":"a = true ; if ( a ) { b = 1 ; } // b == 1 c = false ; if ( c ) { d = 1 ; } else { d = 2 ; } // d == 2 a = false ; b = true ; c = 5 ; if ( a or b ) { d = 1 ; if ( d < c ) { e = d + c ; } } // d == 1, e == 6","title":"Examples"},{"location":"webhookscript/reference.html#for-construct","text":"The for construct allows you to iterate over a value that supports it ( array or string values) , while performing a task on that collection's single item.","title":"for construct"},{"location":"webhookscript/reference.html#examples_1","text":"txt = \"123456789\" ; result = []; for ( n in txt ) { if ( 5 > n . to_number () > 0 ) { result . push ( n ); } } // result == [0: \"1\", 1: \"2\", 2: \"3\", 3: \"4\"] prices = [ 100 , 200 , 300 , 600 , 1200 ]; sentence_template = \"This costs {} units of money!\" ; results = []; for ( price in prices ) { results . push ( sentence_template . format ( price )); } // results == [ // 0: \"This costs 100 units of money!\", // 1: \"This costs 200 units of money!\", // 2: \"This costs 300 units of money!\", // 3: \"This costs 600 units of money!\", // 4: \"This costs 1200 units of money!\" // ] Note: The flow of program inside the for cycle can be controlled further by using the continue and break statements.","title":"Examples"},{"location":"webhookscript/reference.html#while-construct","text":"The while construct does a thing if a specified condition is met (if the condition expression has a truthy value). c = 0 ; while ( c < 100 ) { total = total + c ; c = c + 1 ; } // total == 4950 Note: The flow of program inside the while cycle can be controlled further by using the continue and break statements.","title":"while construct"}]}